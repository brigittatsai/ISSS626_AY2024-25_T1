[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "According to the World Health Organization (WHO), Thailand ranks 9th out of 175 WHO registered countries for road traffic deaths. WHO estimated an average of 50 road traffic deaths. This study will explore on the causes of accidents in Bangkok Metropolitan Region, to reduce future risk of road traffic accidents in Thailand.\n\n\n\n\n\nThe purpose of this study is to discover the factors affecting road traffic accidents in Bangkok Metropolitan Region (BMR) by employing both spatial spatio-temporal point patterns analysis methods.\nList of objectives:\n\nTo visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods\nTo conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\nTo conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\nRoad Traffic Accident major factors:\n\nBehavioural Factors\n\nDriver Behaviour (driving style)\nDriver Performance (driving skills)\n\nEnvironmental Factors\n\n\n\n\n\n\nThe aspatial data for this study is Thailand Road Accident from year 2019 to 2022 from Kaggle\n\n\n\nThe geospatial data for this study are:\n\nThailand Roads from HDX\nThailand Subnational Administrative Boundaries from HDX\n\n\n\n\n\n\npacman::p_load(sp, sf, raster, spatstat, tmap, tidyverse, spNetwork, tmaptools)\n\n\n\n\n\n\n\n\n\nThe csv data includes Thailand Road Accident dataset from the year 2019-2022\n\nroad_accident_raw &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %&gt;%\n  mutate(Month = month(incident_datetime)) %&gt;%\n  mutate(Month_fac = month(incident_datetime, label = TRUE,\n                           abbr = TRUE)) %&gt;%\n  mutate(dayofweek = day(incident_datetime))\n\n\n\n\nThe first shapefile dataset contains Thailand Roads Lines data\n\nthai_road_raw &lt;- st_read(dsn = \"data/rawdata\", \n                 layer = \"hotosm_tha_roads_lines_shp\")\n\nThe second shapefile dataset contains Thailand subnational administrative boundaries data\n\nthai_boundaries_raw &lt;- st_read(dsn = \"data/rawdata\", \n                 layer = \"tha_admbndp_admALL_rtsd_itos_20220121\")\n\n\n\n\n\nTo ensure smooth analysis, let us clean the datasets\n\n\ni. Remove Missing Values\n\nroad_accident_raw &lt;- st_as_sf(road_accident_raw, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\nstop(\"This is an error code\")\n\nmissing values in the longitude and latitude column is not allowed, let’s remove it\nLet us check the missing values in both latitude and longitude column\n\nroad_accident_raw[is.na(road_accident_raw$latitude), ]\n\n\nroad_accident_raw[is.na(road_accident_raw$longitude), ]\n\nLet’s remove the rows with missing values and derive a new cleaned dataset\nRemove all the records with missing value in both latitude and longitude columns using the latitude column\n\nroad_accident &lt;- road_accident_raw[!is.na(road_accident_raw$latitude),]\n\nLet us check if there is still existing missing value using the longitude column\n\nroad_accident[is.na(road_accident$longitude), ]\n\nii. Remove Unnecessary Columns\n\nroad_accident$incident_time &lt;- format(road_accident$incident_datetime, \"%H:%M:%S\")\n\n\nroad_accident$incident_date &lt;- as.Date(road_accident$incident_datetime)\n\n\nroad_accident &lt;- road_accident[, !(names(road_accident) %in% c(\"province_th\", \"route\", \"report_datetime\", \"incident_datetime\"))]\n\niii. Filter Values\nWe are analyzing Bangkok Metropolitan Region, which consists of Bangkok, Nonthaburi, Nakhon Pathom, Pathum Thani, Samut Prakan and Samut Sakhon. Let’s filter the values in province_en column\n\nroad_accident &lt;- road_accident %&gt;% \n  filter(road_accident$province_en %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\")) \n\niv. Set CRS Reference System\n\nroad_accident &lt;- st_as_sf(road_accident, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n\nroad_accident &lt;- road_accident %&gt;% \n  st_transform(crs = 32647)\n\nv. Save Cleaned Dataset\nLet’s save the dataset to the new derived folder rds\n\nwrite_rds(road_accident, \"data/rds/aspatial/road_accident.rds\")\n\n\n\n\ni. Remove Unnecessary Column\nLet us check whether the column includes any value\n\nunique(thai_boundaries_raw$ADM3_REF)\nunique(thai_boundaries_raw$ADM3ALT1EN)\nunique(thai_boundaries_raw$ADM3ALT2EN)\nunique(thai_boundaries_raw$ADM3ALT1TH)\nunique(thai_boundaries_raw$ADM3ALT2TH)\n\nAll the columns consist of missing values\nLet us check other columns using the code below\n\nunique(thai_boundaries_raw$ADM0_EN)\n\nThis column is unnecessary as it has only 1 value, which shows that this only consist of Thailand data\nLet us remove all the columns listed below\n\nthai_boundaries &lt;- thai_boundaries_raw[, !(names(thai_boundaries_raw) %in% c(\"ADM3_REF\", \"ADM3ALT1EN\", \"ADM3ALT2EN\", \"ADM3ALT1TH\", \"ADM3ALT2TH\", \"ADM3_TH\",\"ADM2_TH\", \"ADM1_TH\", \"ADM0_TH\", \"ADM0_EN\", \"ADM0_PCODE\", \"ADM3_EN\", \"ADM3_PCODE\", \"ADM2_EN\", \"ADM2_PCODE\", \"validOn\", \"validTo\"))]\n\nii. Filter Values\nThe columns ADM1 consist of provinces, let’s check using the code chunk below\n\nunique(thai_boundaries$ADM1_EN)\n\nLet us do filtering and remove records that are not in Bangkok Metropolitan Region\n\nthai_boundaries &lt;- thai_boundaries %&gt;%\n  filter(thai_boundaries$ADM1_EN %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\")) \n\niii. Transform EPSG Code\n\nthai_boundaries &lt;- thai_boundaries %&gt;% \n  st_transform(crs = 32647)\n\niv. Save Dataset\n\nwrite_rds(thai_boundaries, \"data/rds/geospatial/thai_boundaries.rds\")\n\n\n\n\ni. Handling Missing Values\nThere are some missing values in the road name column, let’s remove them with the code below\n\nthai_road &lt;- thai_road_raw[!is.na(thai_road_raw$name_en),]\n\nii. Remove Unnecessary Columns\nLet us remove the columns that are not used for this analysis\n\nthai_road &lt;- thai_road[, !(names(thai_road) %in% c(\"name\", \"name_th\", \"osm_id\", \"source\"))]\n\niii. Filter Values\nLet’s filter the values under the highway column in the dataset. Urban and local road that are not wide enough for motor cars will be removed. The highway type is filtered according to this link\n\nunique(thai_road$highway)\n\n\nthai_road &lt;- thai_road %&gt;%\n  filter(thai_road$highway %in% c(\"motorway\", \"motorway_link\", \"primary\", \"primary_link\",\"secondary\",\"secondary_link\",\"tertiary\", \"tertiary_link\")) \n\niv. Set CRS Referencing System\n\nthai_road &lt;- st_set_crs(thai_road, 4326)\n\n\nthai_road &lt;- thai_road %&gt;% \n  st_transform(crs = 32647)\n\n\nthai_road &lt;- st_cast(thai_road, \"LINESTRING\")\n\nv. Save Dataset\n\nwrite_rds(thai_road, \"data/rds/geospatial/thai_road.rds\")\n\n\n\n\n\nThe thai_road data includes all roads in Thailand. Our area of focus in this analysis is only in Bangkok Metropolitan Region (BMR). Let’s perform st_intersection() to filter out the roads data into only BMR area. Before we perform st_intersection(), let’s read the cleaned file of thai_road data\n\nthai_road_rds &lt;- read_rds(\"data/rds/geospatial/thai_road.rds\")\n\nCreate a convex polygon around the points in boundaries data\n\nbmr_polygon &lt;- st_convex_hull(st_union(bmr_boundary))\n\n\nbmr_polygon_sf &lt;- st_sf(geometry = bmr_polygon)\n\nPerform the intersection of data points\n\nbmr_road &lt;- st_intersection(thai_road_rds, bmr_polygon)\n\nSave the new Bangkok Metropolitan Region roads to rds file\n\nwrite_rds(bmr_road, \"data/rds/geospatial/bmr_road.rds\")\n\n\n\n\nAfter the steps above, the datasets are all cleaned and filtered to Bangkok Metropolitan Region area. Now the dataset is ready for use\n\nbmr_accident &lt;- read_rds(\"data/rds/aspatial/road_accident.rds\")\n\n\nbmr_boundary &lt;- read_rds(\"data/rds/geospatial/thai_boundaries.rds\")\n\n\nbmr_road &lt;- read_rds(\"data/rds/geospatial/bmr_road.rds\")\n\n\n\n\n\nAs stated on the Objectives, let us conduct the analysis using the cleaned dataset\n\n\nUsing appropriate statistical graphics and geovisualization methods, visualize the spatio-temporal dynamics of road accident in Bangkok Metropolitan Region area.\n\n\n\naccidents &lt;- as_Spatial(bmr_accident)\nroads &lt;- as_Spatial(bmr_road)\nboundaries &lt;- as_Spatial(bmr_boundary) \n\n\n\n\n\nbmr_boundary_owin &lt;- as.owin(bmr_polygon_sf)\n\n\nsummary(bmr_boundary_owin)\n\n\n\n\n\nbmr_accident_ppp &lt;- as.ppp(bmr_accident)\n\nWarning in as.ppp.sf(bmr_accident): only first attribute column is used for\nmarks\n\n\n\nany(duplicated(bmr_accident_ppp))\n\n[1] FALSE\n\n\n\nplot(bmr_accident_ppp)\n\n\n\n\n\n\n\n\nFrom the plot above, we can see that the thicker dots are where accidents occur more frequently.\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntm_shape(accidents) +\n  tm_dots(alpha=0.5,\n          size=0.05) +\n  tm_basemap(server = \"OpenStreetMap\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs seen from the accident points visualization, there are a lot of accident points. Let’s dive into the causes of the accidents. Before\n\nunique(bmr_accident$presumed_cause)\n\n [1] \"speeding\"                                      \n [2] \"running red lights/traffic signals\"            \n [3] \"other\"                                         \n [4] \"driving under the influence of alcohol\"        \n [5] \"cutting in closely by people/vehicles/animals\" \n [6] \"vehicle equipment failure\"                     \n [7] \"falling asleep\"                                \n [8] \"illegal overtaking\"                            \n [9] \"tailgating\"                                    \n[10] \"failure to yield/signal\"                       \n[11] \"abrupt lane change\"                            \n[12] \"debris/obstruction on the road\"                \n[13] \"driving in the wrong lane\"                     \n[14] \"failure to signal enter/exit parking\"          \n[15] \"failure to yield right of way\"                 \n[16] \"unfamiliarity with the route/unskilled driving\"\n[17] \"dangerous curve\"                               \n[18] \"medical condition\"                             \n[19] \"sudden stop\"                                   \n[20] \"worn-out/tire blowout\"                         \n[21] \"disabled vehicle without proper signals/signs\" \n[22] \"overloaded vehicle\"                            \n[23] \"reversing vehicle\"                             \n[24] \"straddling lanes\"                              \n[25] \"insufficient light\"                            \n[26] \"vehicle electrical system failure\"             \n[27] \"road in poor condition\"                        \n[28] \"disabled vehicle without proper signals\"       \n[29] \"slippery road\"                                 \n[30] \"obstruction in sight\"                          \n[31] \"using mobile phone while driving\"              \n[32] \"ignoring stop sign while leaving intersection\" \n[33] \"brake/anti-lock brake system failure\"          \n[34] \"no traffic signs\"                              \n[35] \"repair/construction on the road\"               \n[36] \"no presumed cause related to driver\"           \n[37] \"no road divider lines\"                         \n[38] \"inadequate visibility\"                         \n[39] \"using psychoactive substances\"                 \n[40] \"loss of control\"                               \n\n\nCategorize the presumed_cause into 3 categories. Environmental Factor, Driver Behaviour and Driver Performance\n\nbmr_accident &lt;- bmr_accident %&gt;%\n  mutate(factor = case_when(\n    presumed_cause %in% c(\"insufficient light\", \"disabled vehicle without proper signals\", \"no traffic signs\", \"no road divider lines\", \"dangerous curve\", \"worn-out/tire blowout\", \"vehicle electrical system failure\", \"slippery road\", \"repair/construction on the road\", \"inadequate visibility\", \"vehicle equipment failure\", \"debris/obstruction on the road\", \"disabled vehicle without proper signals/signs\", \"straddling lanes\", \"road in poor condition\", \"obstruction in sight\", \"brake/anti-lock brake system failure\", \"no presumed cause related to driver\") ~ \"Environmental\",\n    presumed_cause %in% c(\"speeding\", \"driving under the influence of alcohol\", \"falling asleep\", \"sudden stop\", \"overloaded vehicle\", \"using mobile phone while driving\", \"running red lights/traffic signals\",\"cutting in closely by people/vehicles/animals\", \"illegal overtaking\", \"abrupt lane change\", \"ignoring stop sign while leaving intersection\", \"tailgating\", \"using psychoactive substances\") ~ \"Driver Behaviour\",\n    presumed_cause %in% c(\"failure to yield/signal\", \"driving in the wrong lane\", \"unfamiliarity with the route/unskilled driving\", \"loss of control\", \"failure to signal enter/exit parking\", \"reversing vehicle\", \"failure to yield right of way\", \"medical condition\") ~ \"Driver Performance\",\n    TRUE ~ \"Other\"  # Optional: to handle any cases that don't fit\n  ))\n\nSplit sf dataframe into 3 according to the factor of accident\n\nef_accident &lt;- bmr_accident %&gt;% \n  filter(factor == \"Environmental\")\ndb_accident &lt;- bmr_accident %&gt;% \n  filter(factor == \"Driver Behaviour\")\ndp_accident &lt;- bmr_accident %&gt;% \n  filter(factor == \"Driver Performance\")\n\nConvert to ppp object\n\nef_accident_ppp &lt;- as.ppp(ef_accident)\n\nWarning in as.ppp.sf(ef_accident): only first attribute column is used for\nmarks\n\ndb_accident_ppp &lt;- as.ppp(db_accident)\n\nWarning in as.ppp.sf(db_accident): only first attribute column is used for\nmarks\n\ndp_accident_ppp &lt;- as.ppp(dp_accident)\n\nWarning in as.ppp.sf(dp_accident): only first attribute column is used for\nmarks\n\n\n\naccidents_factor &lt;- bmr_accident %&gt;%\n  group_by(factor) %&gt;%\n  summarise(Accident_Count = n(), .groups = 'drop') \n\n\nsummary(accidents_factor$Accident_Count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  140.0   380.0   708.5  3246.5  3575.0 11429.0 \n\n\n\npar(mar = c(8, 4, 4, 2))\nbarplot(accidents_factor$Accident_Count,\n        names.arg = accidents_factor$factor,\n        ylab = \"No. of Accidents\",\n        las = 2)\n\n\n\n\n\n\n\n\nFrom the bar chart plotted above, it can be seen that in Bangkok Metropolitan Region, majority of the accidents are caused due to driver behaviour.\n\n\nLet’s plot the accident points caused by environmental factor\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(bmr_road) +\n  tm_lines(col=\"grey\") +\n  tm_shape(bmr_accident %&gt;% filter(factor == \"Environmental\")) +\n  tm_dots(alpha=0.5,\n          size=0.05)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(bmr_road) +\n  tm_lines(col=\"grey\") +\n  tm_shape(bmr_accident %&gt;% filter(factor == \"Driver Behaviour\")) +\n  tm_dots(alpha=0.5,\n          size=0.05)\n\n\n\n\n\n\n\n\nIn accidents caused by driver behaviour, we can see the roads that have more concentrated dots are the road lines that most accidents occur due to driver behaviour.\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(bmr_road) +\n  tm_lines(col=\"grey\") +\n  tm_shape(bmr_accident %&gt;% filter(factor == \"Driver Performance\")) +\n  tm_dots(alpha=0.5,\n          size=0.05)\n\n\n\n\n\n\n\n\n\n\n\n\n\naccidents_province &lt;- bmr_accident %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(Accident_Count = n(), .groups = 'drop') \n\n\nsummary(accidents_province$Accident_Count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    827     922    1469    2164    2162    6089 \n\n\n\npar(mar = c(8, 4, 4, 2))\nbarplot(accidents_province$Accident_Count,\n        names.arg = accidents_province$province_en,\n        ylab = \"No. of Accidents\",\n        las = 2)\n\n\n\n\n\n\n\n\nFrom the bar chart above, we can see that the majority of accidents happen in Bangkok area. Let’s plot it.\n\nbkk &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Bangkok\")\nnb &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Nonthaburi\")\nnp &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Nakhon Pathom\")\npt &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Pathum Thani\")\nsp &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Samut Prakan\")\nss &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Samut Sakhon\")\n\n\npar(mfrow=c(2,2))\nplot(bkk, main = \"Bangkok\")\n\nWarning: plotting the first 9 out of 18 attributes; use max.plot = 18 to plot\nall\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the analysis result above, we can see that Bangkok has the most accident and most of the accidents happen due to driver behaviour. Let us dive deep into Bangkok area for further analysis\nFilter out Bangkok and factor using the code chunk below\n\nbkk_accidents &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Bangkok\" & factor == \"Driver Behaviour\")\n\nLet us plot the map below\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(bkk_accidents) +\n  tm_dots()\n\n\n\n\n\n\n\n\n\nIf we see from the map above, we can see that most of the accidents are concentrated on the 4-way intersection on the right side of the map. These accidents happen due to driver behaviours.\nLet us check the type of highway with most accidents using the code below\n\nbkk_highway &lt;- st_join(bmr_road, bkk_accidents)\n\n\naccidents_highway &lt;- bkk_highway %&gt;%\n  group_by(bkk_highway$highway) %&gt;%\n  summarise(Highway_Count = n(), .groups = 'drop')\n\n\npar(mar = c(8, 4, 4, 2))\nbarplot(accidents_highway$Highway_Count,\n        names.arg = accidents_highway$highway,\n        ylab = \"No. of Accidents\",\n        las = 2)\n\nWarning: Unknown or uninitialised column: `highway`.\n\n\n\n\n\n\n\n\n\nThe barplot shows that most accidents happen in primary, secondary and tertiary highways.\n\n\n\nUsing the appropriate network spatial point pattern analysis methods, conduct a detailed spatial analysis of the road accidents.\n\n\nThe boundaries data is in geometry points, convert to linestring first\n\nbmr_lineboundary &lt;- st_cast(bmr_boundary, \"LINESTRING\")\n\nPrepare Lixels and sample\n\nlixels &lt;- lixelize_lines(bmr_lineboundary,200,mindist = 50)\nsamples &lt;- lines_center(lixels)\n\n\nbmr_lineboundary &lt;- bmr_lineboundary[!st_is_valid(bmr_lineboundary),]\n\n\ndim(bmr_lineboundary)\n\n[1] 477   7\n\ndim(bmr_accident)\n\n[1] 12986    19\n\ndim(samples)\n\n[1] 477   8\n\n\n\n\n\n\ndata(bmr_road) \n\nWarning in data(bmr_road): data set 'bmr_road' not found\n\ndata(ef_accident)\n\nWarning in data(ef_accident): data set 'ef_accident' not found\n\ntm_shape(bmr_road) + \n  tm_lines(\"grey\") + \n  tm_shape(ef_accident) + \n  tm_dots(\"red\", size = 0.05)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom this study, we can conclude that most accidents are caused by driver behaviour and the following picture is the 4 way intersection with the most accident data points.\n\nMost of the accidents happened in the primary, secondary and tertiary highways. The driver behaviour is something that we need to focus on for future studies, to prevent future accidents from happening. For future safety of road traffic, the Bangkok Metropolitan should pay more attention on primary, secondary and tertiary highways by implementing more strict rules on driving in the road. As we can see from the plotted maps, along the intercity road from Pathum Thani to Samut Prakan are filled with a lot of road accident points."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "According to the World Health Organization (WHO), Thailand ranks 9th out of 175 WHO registered countries for road traffic deaths. WHO estimated an average of 50 road traffic deaths. This study will explore on the causes of accidents in Bangkok Metropolitan Region, to reduce future risk of road traffic accidents in Thailand."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The purpose of this study is to discover the factors affecting road traffic accidents in Bangkok Metropolitan Region (BMR) by employing both spatial spatio-temporal point patterns analysis methods.\nList of objectives:\n\nTo visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods\nTo conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\nTo conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\nRoad Traffic Accident major factors:\n\nBehavioural Factors\n\nDriver Behaviour (driving style)\nDriver Performance (driving skills)\n\nEnvironmental Factors\n\n\n\n\n\n\nThe aspatial data for this study is Thailand Road Accident from year 2019 to 2022 from Kaggle\n\n\n\nThe geospatial data for this study are:\n\nThailand Roads from HDX\nThailand Subnational Administrative Boundaries from HDX\n\n\n\n\n\n\npacman::p_load(sp, sf, raster, spatstat, tmap, tidyverse, spNetwork, tmaptools)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation-and-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation-and-wrangling",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The csv data includes Thailand Road Accident dataset from the year 2019-2022\n\nroad_accident_raw &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %&gt;%\n  mutate(Month = month(incident_datetime)) %&gt;%\n  mutate(Month_fac = month(incident_datetime, label = TRUE,\n                           abbr = TRUE)) %&gt;%\n  mutate(dayofweek = day(incident_datetime))\n\n\n\n\nThe first shapefile dataset contains Thailand Roads Lines data\n\nthai_road_raw &lt;- st_read(dsn = \"data/rawdata\", \n                 layer = \"hotosm_tha_roads_lines_shp\")\n\nThe second shapefile dataset contains Thailand subnational administrative boundaries data\n\nthai_boundaries_raw &lt;- st_read(dsn = \"data/rawdata\", \n                 layer = \"tha_admbndp_admALL_rtsd_itos_20220121\")\n\n\n\n\n\nTo ensure smooth analysis, let us clean the datasets\n\n\ni. Remove Missing Values\n\nroad_accident_raw &lt;- st_as_sf(road_accident_raw, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\nstop(\"This is an error code\")\n\nmissing values in the longitude and latitude column is not allowed, let’s remove it\nLet us check the missing values in both latitude and longitude column\n\nroad_accident_raw[is.na(road_accident_raw$latitude), ]\n\n\nroad_accident_raw[is.na(road_accident_raw$longitude), ]\n\nLet’s remove the rows with missing values and derive a new cleaned dataset\nRemove all the records with missing value in both latitude and longitude columns using the latitude column\n\nroad_accident &lt;- road_accident_raw[!is.na(road_accident_raw$latitude),]\n\nLet us check if there is still existing missing value using the longitude column\n\nroad_accident[is.na(road_accident$longitude), ]\n\nii. Remove Unnecessary Columns\n\nroad_accident$incident_time &lt;- format(road_accident$incident_datetime, \"%H:%M:%S\")\n\n\nroad_accident$incident_date &lt;- as.Date(road_accident$incident_datetime)\n\n\nroad_accident &lt;- road_accident[, !(names(road_accident) %in% c(\"province_th\", \"route\", \"report_datetime\", \"incident_datetime\"))]\n\niii. Filter Values\nWe are analyzing Bangkok Metropolitan Region, which consists of Bangkok, Nonthaburi, Nakhon Pathom, Pathum Thani, Samut Prakan and Samut Sakhon. Let’s filter the values in province_en column\n\nroad_accident &lt;- road_accident %&gt;% \n  filter(road_accident$province_en %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\")) \n\niv. Set CRS Reference System\n\nroad_accident &lt;- st_as_sf(road_accident, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n\nroad_accident &lt;- road_accident %&gt;% \n  st_transform(crs = 32647)\n\nv. Save Cleaned Dataset\nLet’s save the dataset to the new derived folder rds\n\nwrite_rds(road_accident, \"data/rds/aspatial/road_accident.rds\")\n\n\n\n\ni. Remove Unnecessary Column\nLet us check whether the column includes any value\n\nunique(thai_boundaries_raw$ADM3_REF)\nunique(thai_boundaries_raw$ADM3ALT1EN)\nunique(thai_boundaries_raw$ADM3ALT2EN)\nunique(thai_boundaries_raw$ADM3ALT1TH)\nunique(thai_boundaries_raw$ADM3ALT2TH)\n\nAll the columns consist of missing values\nLet us check other columns using the code below\n\nunique(thai_boundaries_raw$ADM0_EN)\n\nThis column is unnecessary as it has only 1 value, which shows that this only consist of Thailand data\nLet us remove all the columns listed below\n\nthai_boundaries &lt;- thai_boundaries_raw[, !(names(thai_boundaries_raw) %in% c(\"ADM3_REF\", \"ADM3ALT1EN\", \"ADM3ALT2EN\", \"ADM3ALT1TH\", \"ADM3ALT2TH\", \"ADM3_TH\",\"ADM2_TH\", \"ADM1_TH\", \"ADM0_TH\", \"ADM0_EN\", \"ADM0_PCODE\", \"ADM3_EN\", \"ADM3_PCODE\", \"ADM2_EN\", \"ADM2_PCODE\", \"validOn\", \"validTo\"))]\n\nii. Filter Values\nThe columns ADM1 consist of provinces, let’s check using the code chunk below\n\nunique(thai_boundaries$ADM1_EN)\n\nLet us do filtering and remove records that are not in Bangkok Metropolitan Region\n\nthai_boundaries &lt;- thai_boundaries %&gt;%\n  filter(thai_boundaries$ADM1_EN %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\")) \n\niii. Transform EPSG Code\n\nthai_boundaries &lt;- thai_boundaries %&gt;% \n  st_transform(crs = 32647)\n\niv. Save Dataset\n\nwrite_rds(thai_boundaries, \"data/rds/geospatial/thai_boundaries.rds\")\n\n\n\n\ni. Handling Missing Values\nThere are some missing values in the road name column, let’s remove them with the code below\n\nthai_road &lt;- thai_road_raw[!is.na(thai_road_raw$name_en),]\n\nii. Remove Unnecessary Columns\nLet us remove the columns that are not used for this analysis\n\nthai_road &lt;- thai_road[, !(names(thai_road) %in% c(\"name\", \"name_th\", \"osm_id\", \"source\"))]\n\niii. Filter Values\nLet’s filter the values under the highway column in the dataset. Urban and local road that are not wide enough for motor cars will be removed. The highway type is filtered according to this link\n\nunique(thai_road$highway)\n\n\nthai_road &lt;- thai_road %&gt;%\n  filter(thai_road$highway %in% c(\"motorway\", \"motorway_link\", \"primary\", \"primary_link\",\"secondary\",\"secondary_link\",\"tertiary\", \"tertiary_link\")) \n\niv. Set CRS Referencing System\n\nthai_road &lt;- st_set_crs(thai_road, 4326)\n\n\nthai_road &lt;- thai_road %&gt;% \n  st_transform(crs = 32647)\n\n\nthai_road &lt;- st_cast(thai_road, \"LINESTRING\")\n\nv. Save Dataset\n\nwrite_rds(thai_road, \"data/rds/geospatial/thai_road.rds\")\n\n\n\n\n\nThe thai_road data includes all roads in Thailand. Our area of focus in this analysis is only in Bangkok Metropolitan Region (BMR). Let’s perform st_intersection() to filter out the roads data into only BMR area. Before we perform st_intersection(), let’s read the cleaned file of thai_road data\n\nthai_road_rds &lt;- read_rds(\"data/rds/geospatial/thai_road.rds\")\n\nCreate a convex polygon around the points in boundaries data\n\nbmr_polygon &lt;- st_convex_hull(st_union(bmr_boundary))\n\n\nbmr_polygon_sf &lt;- st_sf(geometry = bmr_polygon)\n\nPerform the intersection of data points\n\nbmr_road &lt;- st_intersection(thai_road_rds, bmr_polygon)\n\nSave the new Bangkok Metropolitan Region roads to rds file\n\nwrite_rds(bmr_road, \"data/rds/geospatial/bmr_road.rds\")\n\n\n\n\nAfter the steps above, the datasets are all cleaned and filtered to Bangkok Metropolitan Region area. Now the dataset is ready for use\n\nbmr_accident &lt;- read_rds(\"data/rds/aspatial/road_accident.rds\")\n\n\nbmr_boundary &lt;- read_rds(\"data/rds/geospatial/thai_boundaries.rds\")\n\n\nbmr_road &lt;- read_rds(\"data/rds/geospatial/bmr_road.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geovisualization-and-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geovisualization-and-analysis",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "As stated on the Objectives, let us conduct the analysis using the cleaned dataset\n\n\nUsing appropriate statistical graphics and geovisualization methods, visualize the spatio-temporal dynamics of road accident in Bangkok Metropolitan Region area.\n\n\n\naccidents &lt;- as_Spatial(bmr_accident)\nroads &lt;- as_Spatial(bmr_road)\nboundaries &lt;- as_Spatial(bmr_boundary) \n\n\n\n\n\nbmr_boundary_owin &lt;- as.owin(bmr_polygon_sf)\n\n\nsummary(bmr_boundary_owin)\n\n\n\n\n\nbmr_accident_ppp &lt;- as.ppp(bmr_accident)\n\nWarning in as.ppp.sf(bmr_accident): only first attribute column is used for\nmarks\n\n\n\nany(duplicated(bmr_accident_ppp))\n\n[1] FALSE\n\n\n\nplot(bmr_accident_ppp)\n\n\n\n\n\n\n\n\nFrom the plot above, we can see that the thicker dots are where accidents occur more frequently.\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntm_shape(accidents) +\n  tm_dots(alpha=0.5,\n          size=0.05) +\n  tm_basemap(server = \"OpenStreetMap\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs seen from the accident points visualization, there are a lot of accident points. Let’s dive into the causes of the accidents. Before\n\nunique(bmr_accident$presumed_cause)\n\n [1] \"speeding\"                                      \n [2] \"running red lights/traffic signals\"            \n [3] \"other\"                                         \n [4] \"driving under the influence of alcohol\"        \n [5] \"cutting in closely by people/vehicles/animals\" \n [6] \"vehicle equipment failure\"                     \n [7] \"falling asleep\"                                \n [8] \"illegal overtaking\"                            \n [9] \"tailgating\"                                    \n[10] \"failure to yield/signal\"                       \n[11] \"abrupt lane change\"                            \n[12] \"debris/obstruction on the road\"                \n[13] \"driving in the wrong lane\"                     \n[14] \"failure to signal enter/exit parking\"          \n[15] \"failure to yield right of way\"                 \n[16] \"unfamiliarity with the route/unskilled driving\"\n[17] \"dangerous curve\"                               \n[18] \"medical condition\"                             \n[19] \"sudden stop\"                                   \n[20] \"worn-out/tire blowout\"                         \n[21] \"disabled vehicle without proper signals/signs\" \n[22] \"overloaded vehicle\"                            \n[23] \"reversing vehicle\"                             \n[24] \"straddling lanes\"                              \n[25] \"insufficient light\"                            \n[26] \"vehicle electrical system failure\"             \n[27] \"road in poor condition\"                        \n[28] \"disabled vehicle without proper signals\"       \n[29] \"slippery road\"                                 \n[30] \"obstruction in sight\"                          \n[31] \"using mobile phone while driving\"              \n[32] \"ignoring stop sign while leaving intersection\" \n[33] \"brake/anti-lock brake system failure\"          \n[34] \"no traffic signs\"                              \n[35] \"repair/construction on the road\"               \n[36] \"no presumed cause related to driver\"           \n[37] \"no road divider lines\"                         \n[38] \"inadequate visibility\"                         \n[39] \"using psychoactive substances\"                 \n[40] \"loss of control\"                               \n\n\nCategorize the presumed_cause into 3 categories. Environmental Factor, Driver Behaviour and Driver Performance\n\nbmr_accident &lt;- bmr_accident %&gt;%\n  mutate(factor = case_when(\n    presumed_cause %in% c(\"insufficient light\", \"disabled vehicle without proper signals\", \"no traffic signs\", \"no road divider lines\", \"dangerous curve\", \"worn-out/tire blowout\", \"vehicle electrical system failure\", \"slippery road\", \"repair/construction on the road\", \"inadequate visibility\", \"vehicle equipment failure\", \"debris/obstruction on the road\", \"disabled vehicle without proper signals/signs\", \"straddling lanes\", \"road in poor condition\", \"obstruction in sight\", \"brake/anti-lock brake system failure\", \"no presumed cause related to driver\") ~ \"Environmental\",\n    presumed_cause %in% c(\"speeding\", \"driving under the influence of alcohol\", \"falling asleep\", \"sudden stop\", \"overloaded vehicle\", \"using mobile phone while driving\", \"running red lights/traffic signals\",\"cutting in closely by people/vehicles/animals\", \"illegal overtaking\", \"abrupt lane change\", \"ignoring stop sign while leaving intersection\", \"tailgating\", \"using psychoactive substances\") ~ \"Driver Behaviour\",\n    presumed_cause %in% c(\"failure to yield/signal\", \"driving in the wrong lane\", \"unfamiliarity with the route/unskilled driving\", \"loss of control\", \"failure to signal enter/exit parking\", \"reversing vehicle\", \"failure to yield right of way\", \"medical condition\") ~ \"Driver Performance\",\n    TRUE ~ \"Other\"  # Optional: to handle any cases that don't fit\n  ))\n\nSplit sf dataframe into 3 according to the factor of accident\n\nef_accident &lt;- bmr_accident %&gt;% \n  filter(factor == \"Environmental\")\ndb_accident &lt;- bmr_accident %&gt;% \n  filter(factor == \"Driver Behaviour\")\ndp_accident &lt;- bmr_accident %&gt;% \n  filter(factor == \"Driver Performance\")\n\nConvert to ppp object\n\nef_accident_ppp &lt;- as.ppp(ef_accident)\n\nWarning in as.ppp.sf(ef_accident): only first attribute column is used for\nmarks\n\ndb_accident_ppp &lt;- as.ppp(db_accident)\n\nWarning in as.ppp.sf(db_accident): only first attribute column is used for\nmarks\n\ndp_accident_ppp &lt;- as.ppp(dp_accident)\n\nWarning in as.ppp.sf(dp_accident): only first attribute column is used for\nmarks\n\n\n\naccidents_factor &lt;- bmr_accident %&gt;%\n  group_by(factor) %&gt;%\n  summarise(Accident_Count = n(), .groups = 'drop') \n\n\nsummary(accidents_factor$Accident_Count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  140.0   380.0   708.5  3246.5  3575.0 11429.0 \n\n\n\npar(mar = c(8, 4, 4, 2))\nbarplot(accidents_factor$Accident_Count,\n        names.arg = accidents_factor$factor,\n        ylab = \"No. of Accidents\",\n        las = 2)\n\n\n\n\n\n\n\n\nFrom the bar chart plotted above, it can be seen that in Bangkok Metropolitan Region, majority of the accidents are caused due to driver behaviour.\n\n\nLet’s plot the accident points caused by environmental factor\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(bmr_road) +\n  tm_lines(col=\"grey\") +\n  tm_shape(bmr_accident %&gt;% filter(factor == \"Environmental\")) +\n  tm_dots(alpha=0.5,\n          size=0.05)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(bmr_road) +\n  tm_lines(col=\"grey\") +\n  tm_shape(bmr_accident %&gt;% filter(factor == \"Driver Behaviour\")) +\n  tm_dots(alpha=0.5,\n          size=0.05)\n\n\n\n\n\n\n\n\nIn accidents caused by driver behaviour, we can see the roads that have more concentrated dots are the road lines that most accidents occur due to driver behaviour.\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(bmr_road) +\n  tm_lines(col=\"grey\") +\n  tm_shape(bmr_accident %&gt;% filter(factor == \"Driver Performance\")) +\n  tm_dots(alpha=0.5,\n          size=0.05)\n\n\n\n\n\n\n\n\n\n\n\n\n\naccidents_province &lt;- bmr_accident %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(Accident_Count = n(), .groups = 'drop') \n\n\nsummary(accidents_province$Accident_Count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    827     922    1469    2164    2162    6089 \n\n\n\npar(mar = c(8, 4, 4, 2))\nbarplot(accidents_province$Accident_Count,\n        names.arg = accidents_province$province_en,\n        ylab = \"No. of Accidents\",\n        las = 2)\n\n\n\n\n\n\n\n\nFrom the bar chart above, we can see that the majority of accidents happen in Bangkok area. Let’s plot it.\n\nbkk &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Bangkok\")\nnb &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Nonthaburi\")\nnp &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Nakhon Pathom\")\npt &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Pathum Thani\")\nsp &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Samut Prakan\")\nss &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Samut Sakhon\")\n\n\npar(mfrow=c(2,2))\nplot(bkk, main = \"Bangkok\")\n\nWarning: plotting the first 9 out of 18 attributes; use max.plot = 18 to plot\nall\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the analysis result above, we can see that Bangkok has the most accident and most of the accidents happen due to driver behaviour. Let us dive deep into Bangkok area for further analysis\nFilter out Bangkok and factor using the code chunk below\n\nbkk_accidents &lt;- bmr_accident %&gt;% \n  filter(province_en == \"Bangkok\" & factor == \"Driver Behaviour\")\n\nLet us plot the map below\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(bkk_accidents) +\n  tm_dots()\n\n\n\n\n\n\n\n\n\nIf we see from the map above, we can see that most of the accidents are concentrated on the 4-way intersection on the right side of the map. These accidents happen due to driver behaviours.\nLet us check the type of highway with most accidents using the code below\n\nbkk_highway &lt;- st_join(bmr_road, bkk_accidents)\n\n\naccidents_highway &lt;- bkk_highway %&gt;%\n  group_by(bkk_highway$highway) %&gt;%\n  summarise(Highway_Count = n(), .groups = 'drop')\n\n\npar(mar = c(8, 4, 4, 2))\nbarplot(accidents_highway$Highway_Count,\n        names.arg = accidents_highway$highway,\n        ylab = \"No. of Accidents\",\n        las = 2)\n\nWarning: Unknown or uninitialised column: `highway`.\n\n\n\n\n\n\n\n\n\nThe barplot shows that most accidents happen in primary, secondary and tertiary highways.\n\n\n\nUsing the appropriate network spatial point pattern analysis methods, conduct a detailed spatial analysis of the road accidents.\n\n\nThe boundaries data is in geometry points, convert to linestring first\n\nbmr_lineboundary &lt;- st_cast(bmr_boundary, \"LINESTRING\")\n\nPrepare Lixels and sample\n\nlixels &lt;- lixelize_lines(bmr_lineboundary,200,mindist = 50)\nsamples &lt;- lines_center(lixels)\n\n\nbmr_lineboundary &lt;- bmr_lineboundary[!st_is_valid(bmr_lineboundary),]\n\n\ndim(bmr_lineboundary)\n\n[1] 477   7\n\ndim(bmr_accident)\n\n[1] 12986    19\n\ndim(samples)\n\n[1] 477   8\n\n\n\n\n\n\ndata(bmr_road) \n\nWarning in data(bmr_road): data set 'bmr_road' not found\n\ndata(ef_accident)\n\nWarning in data(ef_accident): data set 'ef_accident' not found\n\ntm_shape(bmr_road) + \n  tm_lines(\"grey\") + \n  tm_shape(ef_accident) + \n  tm_dots(\"red\", size = 0.05)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "Package: GWmodel\nFunction bw.gwr is used for automatic bandwidth selection to calibrate a basic GWR model\n\n\n\npacman::p_load(sf, ggstatsplot, tmap, tidyverse, knitr, GWmodel)\n\n\n\n\n\nhunan_sf &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\brigittatsai\\ISSS626_AY2024-25_T1\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012) %&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nJoining with `by = join_by(County)`\n\n\n\n\n\n\nhunan_sp &lt;- hunan_sf %&gt;%\n  as_Spatial()\n\n\n\n\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nbw_CV\n\n[1] 22\n\n\nThe result above is the number of neighbours, hence the number of optimum neighbours is 22.\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_AIC\n\n[1] 22\n\n\nThe number of optimum neighbour is also 22.\n\n\n\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n\n\ngwstat\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n\n   ***********************Calibration information*************************\n\n   Local summary statistics calculated for variables:\n    GDPPC\n   Number of summary points: 88\n   Kernel function: bisquare \n   Summary points: the same locations as observations are used.\n   Adaptive bandwidth: 22 (number of nearest neighbours)\n   Distance metric: Great Circle distance metric is used.\n\n   ************************Local Summary Statistics:**********************\n   Summary information for Local means:\nGDPPC_LM \n    Min.  1st Qu.   Median  3rd Qu.     Max. \n13688.70 17995.43 23408.07 27865.12 49005.84 \n   Summary information for local standard deviation :\nGDPPC_LSD \n     Min.   1st Qu.    Median   3rd Qu.      Max. \n 4282.599  6297.788  8281.756 16315.028 22568.841 \n   Summary information for local variance :\nGDPPC_LVar \n     Min.   1st Qu.    Median   3rd Qu.      Max. \n 18340656  39662960  68633859 266187788 509352591 \n   Summary information for Local skewness:\nGDPPC_LSKe \n      Min.    1st Qu.     Median    3rd Qu.       Max. \n-0.2150599  0.9900027  1.3714638  1.8387524  3.7525953 \n   Summary information for localized coefficient of variation:\nGDPPC_LCV \n     Min.   1st Qu.    Median   3rd Qu.      Max. \n0.2000503 0.3107774 0.3829294 0.5129959 0.8018153 \n\n   ************************************************************************\n\n\n\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\ncbind() is used to append the newly derived data.frame onto hunan_sf sf dataframe\n\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)\n\n\n\n\n\n\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\nFixed bandwidth is in distance (km), hence the value varies more. For the adaptive bandwidth, only use boundaries and number of neighbours, hence the value is more fixed."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#load-r-packages",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#load-r-packages",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "pacman::p_load(sf, ggstatsplot, tmap, tidyverse, knitr, GWmodel)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#import-dataset-into-r",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#import-dataset-into-r",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "hunan_sf &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\brigittatsai\\ISSS626_AY2024-25_T1\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012) %&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-to-spatial-polygon-data-frame",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-to-spatial-polygon-data-frame",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "hunan_sp &lt;- hunan_sf %&gt;%\n  as_Spatial()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "bw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nbw_CV\n\n[1] 22\n\n\nThe result above is the number of neighbours, hence the number of optimum neighbours is 22.\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_AIC\n\n[1] 22\n\n\nThe number of optimum neighbour is also 22.\n\n\n\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n\n\ngwstat\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n\n   ***********************Calibration information*************************\n\n   Local summary statistics calculated for variables:\n    GDPPC\n   Number of summary points: 88\n   Kernel function: bisquare \n   Summary points: the same locations as observations are used.\n   Adaptive bandwidth: 22 (number of nearest neighbours)\n   Distance metric: Great Circle distance metric is used.\n\n   ************************Local Summary Statistics:**********************\n   Summary information for Local means:\nGDPPC_LM \n    Min.  1st Qu.   Median  3rd Qu.     Max. \n13688.70 17995.43 23408.07 27865.12 49005.84 \n   Summary information for local standard deviation :\nGDPPC_LSD \n     Min.   1st Qu.    Median   3rd Qu.      Max. \n 4282.599  6297.788  8281.756 16315.028 22568.841 \n   Summary information for local variance :\nGDPPC_LVar \n     Min.   1st Qu.    Median   3rd Qu.      Max. \n 18340656  39662960  68633859 266187788 509352591 \n   Summary information for Local skewness:\nGDPPC_LSKe \n      Min.    1st Qu.     Median    3rd Qu.       Max. \n-0.2150599  0.9900027  1.3714638  1.8387524  3.7525953 \n   Summary information for localized coefficient of variation:\nGDPPC_LCV \n     Min.   1st Qu.    Median   3rd Qu.      Max. \n0.2000503 0.3107774 0.3829294 0.5129959 0.8018153 \n\n   ************************************************************************\n\n\n\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\ncbind() is used to append the newly derived data.frame onto hunan_sf sf dataframe\n\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#geographically-weighted-summary-statistics-with-fixed-bandwidth",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#geographically-weighted-summary-statistics-with-fixed-bandwidth",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "bw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\nFixed bandwidth is in distance (km), hence the value varies more. For the adaptive bandwidth, only use boundaries and number of neighbours, hence the value is more fixed."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/data/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex02/data/MPSZ-2019.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/MPSZ-2019.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "pacman::p_load(sf, spNetwork, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#load-packages",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#load-packages",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "pacman::p_load(sf, spNetwork, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#import-datasets",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#import-datasets",
    "title": "In-class Exercise 3",
    "section": "Import Datasets",
    "text": "Import Datasets\n\nnetwork &lt;- st_read(dsn=\"data/geospatial\", \n                   layer=\"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `C:\\brigittatsai\\ISSS626_AY2024-25_T1\\In-class_Ex\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\nThere is Z value in the dataset, drop Z dimension using st_zm() function\n\nchildcare &lt;- st_read(dsn=\"data/geospatial\",\n                     layer=\"Punggol_CC\") %&gt;%\n  st_zm(drop = TRUE,\n        what = \"ZM\")\n\nReading layer `Punggol_CC' from data source \n  `C:\\brigittatsai\\ISSS626_AY2024-25_T1\\In-class_Ex\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\ncheck the output, the Z value has disappeared. The output of the code above interprets the input of the data instead of the output shp file."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-geospatial-data",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-geospatial-data",
    "title": "In-class Exercise 3",
    "section": "Visualising Geospatial Data",
    "text": "Visualising Geospatial Data\nWithout st_geometry, the plot will be separated:\n\nplot(network)\nplot(childcare,add=T,col='red',pch = 19)\n\n\n\n\n\n\n\n\npch = point size\nadd=T, open plot or override the dots to the previous plot\n\nplot(st_geometry(network))\nplot(childcare,add=T,col='red',pch = 19)\n\n\n\n\n\n\n\n\nto put markers using tmap, there are at least 4 ways to do it\ntm_symbols(), tm_squares(), tm_bubbles(), tm_dots(), tm_markers()\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare) + \n  tm_dots(col = \"red\") + \n  tm_shape(network) +\n  tm_lines()\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nleaflet = lightweight mapping package (eg. for mobile app)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#preparing-lixel-objects",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#preparing-lixel-objects",
    "title": "In-class Exercise 3",
    "section": "Preparing Lixel Objects",
    "text": "Preparing Lixel Objects\nlength of lixel = 700m -&gt; set to 700 based on study\nminimum length of a lixel = 350 -&gt; center point (minimum distance)\n\nlixels &lt;- lixelize_lines(network, \n                         700, \n                         mindist = 350)\n\noutput: 2645 observation\noriginal (network): 2642 observation\nthis happens because the last segment is longer than 350\n\nlixels &lt;- lixelize_lines(network, \n                         700, \n                         mindist = 150)\n\nif we change minimum distance to 150, the no. of segment will change\n\nsamples &lt;- lines_center(lixels)\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(lixels) +\n  tm_lines() +\ntm_shape(samples) +\n  tm_dots(size = 0.01)\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#performing-nkde",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#performing-nkde",
    "title": "In-class Exercise 3",
    "section": "Performing NKDE",
    "text": "Performing NKDE\n\ndensities &lt;- nkde(network, \n                   events = childcare,\n                   w = rep(1, nrow(childcare)),\n                   samples = samples, # input data\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(1,1),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\nThe code chunk below is a way to append the value to sample/ lixel dataframe (concept: left join table, but there is no need for unique identifier):\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\ndon’t do sorting (it will change the sequence and the point reference will be inaccurate)\nkfunction = accumulative distance\ngfunction = ring by ring\nThe code chunk below results in both kplot and gplot\nkfun_childcare &lt;- kfunctions(network, childcare, start = 0, end = 1000, step = 50, width = 50, nsim = 50, resolution = 50, verbose = FALSE, conf_int = 0.05)\nTo plot only the kfunction, use the following code (change to plotg to plot gfunction):\nkfun_childcare$plotk"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "From this study, we can conclude that most accidents are caused by driver behaviour and the following picture is the 4 way intersection with the most accident data points.\n\nMost of the accidents happened in the primary, secondary and tertiary highways. The driver behaviour is something that we need to focus on for future studies, to prevent future accidents from happening. For future safety of road traffic, the Bangkok Metropolitan should pay more attention on primary, secondary and tertiary highways by implementing more strict rules on driving in the road. As we can see from the plotted maps, along the intercity road from Pathum Thani to Samut Prakan are filled with a lot of road accident points."
  }
]