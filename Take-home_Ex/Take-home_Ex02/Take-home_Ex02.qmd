---
title: "Take-home Exercise 2"
author: "Brigitta Karen Tsai"
date: "October 6, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Take-home Exercise 2: Discovering Impact of COVID-19 on Thailand Tourism Economy at Province Level using Spatial and Spatio-temporal Statistics

## 1 Overview

### 1.1 Background

### 1.2 Objectives

In this analysis, we are interested to discover:

-   If the key indicators of tourism economy of Thailand are independent from space and time

## 2 Getting Started

### 2.1 Installing and Loading R Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, GGally, GWmodel,
               ggstatsplot, Kendall, plotly, sfdep)
```

### 2.2 Importing Dataset

::: panel-tabset
### Aspatial Data

```{r}
tourism <- read_csv("data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv") %>% 
  mutate(year = year(date))
```

### Geospatial Data

```{r}
boundary <- st_read(dsn = "data/geospatial",
                        layer = "tha_admbnda_adm1_rtsd_20220121") %>% 
  st_transform(crs = 32647)
```
:::

## 3 Data Wrangling

### 3.1 Geospatial Data Wrangling

```{r}
boundary <- boundary %>%
  rename(province_eng = ADM1_EN)
```

```{r}
boundary <- boundary[, !(names(boundary) %in% c("ADM3_REF", "ADM3ALT1EN", "ADM3ALT2EN", "ADM3ALT1TH", "ADM3ALT2TH", "ADM3_TH","ADM2_TH", "ADM1_TH", "ADM0_TH", "ADM0_EN", "ADM0_PCODE", "ADM3_PCODE", "ADM2_PCODE", "validOn", "validTo", "ADM1_PCODE", "date", "ADM1_REF", "ADM1ALT1EN", "ADM1ALT2EN", "ADM1ALT1TH", "ADM1ALT2TH"))]
```

```{r}
boundary[is.na(boundary$Shape_Leng), ]
```

### 3.2 Aspatial Data Wrangling

```{r}
tourism <- tourism[, !(names(tourism) %in% c("province_thai", "region_thai"))]
```

```{r}
unique(tourism$variable)
```

```{r}
options(scipen = 999) # to display full number when summing up the value column
```

**Revenue generated by tourism industry**

```{r}
revenue_all <- tourism %>%
  filter(tourism$variable %in% c("revenue_all"))
```

```{r}
revenue_all <- revenue_all %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
revenue_all <- revenue_all %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Revenue generated by Thai tourists**

```{r}
revenue_thai <- tourism %>%
  filter(tourism$variable %in% c("revenue_thai"))
```

```{r}
revenue_thai <- revenue_thai %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
revenue_thai <- revenue_thai %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Revenue generated by foreign tourists**

```{r}
revenue_foreign <- tourism %>%
  filter(tourism$variable %in% c("revenue_foreign"))
```

```{r}
revenue_foreign <- revenue_foreign %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
revenue_foreign <- revenue_foreign %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Number of tourists who stay overnight**

```{r}
tourist_stay <- tourism %>%
  filter(tourism$variable %in% c("no_tourist_stay"))
```

```{r}
tourist_stay <- tourist_stay %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourist_stay <- tourist_stay %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Number of domestic tourists who visited the province**

```{r}
tourist_all <- tourism %>%
  filter(tourism$variable %in% c("no_tourist_all"))
```

```{r}
tourist_all <- tourist_all %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourist_all <- tourist_all %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Number of Thai tourists who visited the province**

```{r}
tourist_thai <- tourism %>%
  filter(tourism$variable %in% c("no_tourist_thai"))
```

```{r}
tourist_thai <- tourist_thai %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourist_thai <- tourist_thai %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Number of foreign tourists who visited the province**

```{r}
tourist_foreign <- tourism %>%
  filter(tourism$variable %in% c("no_tourist_foreign"))
```

```{r}
tourist_foreign <- tourist_foreign %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourist_foreign <- tourist_foreign %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Ratio of tourist stay overnight**

Ratio = Total rooms booked/ total available rooms

```{r}
ratio_tourist <- tourism %>%
  filter(tourism$variable %in% c("ratio_tourist_stay"))
```

For this column, we will use **median** to aggregate the values as it is not appropriate to sum ratio values

```{r}
ratio_tourist <- ratio_tourist %>%
  group_by(province_eng) %>%
  summarize(value = median(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
ratio_tourist <- ratio_tourist %>%
  pivot_wider(names_from = variable, values_from = value)
```

### 3.3 Join Tables

#### 3.3.1 Join Aspatial Data

As seen in previous section, the tourism dataset is divided into each variables to sum the values. Let's first join the tourism dataset into 1 again.

```{r}
tourism_data <- revenue_all %>%
  left_join(revenue_thai, by = "province_eng") %>%
  left_join(revenue_foreign, by = "province_eng") %>%
  left_join(tourist_stay, by = "province_eng") %>% 
  left_join(tourist_all, by = "province_eng") %>% 
  left_join(tourist_thai, by = "province_eng") %>% 
  left_join(tourist_foreign, by = "province_eng") %>% 
  left_join(ratio_tourist, by = "province_eng")
```

#### 3.3.2 Join Aspatial and Geospatial Data

Now, let us join both boundary and tourism data

```{r}
thai_tourism <- left_join(boundary, tourism_data, by = c("province_eng"))
```

Let us check if there is unmatched rows to ensure data is accurate

```{r}
unmatched <- thai_tourism %>% 
  filter(is.na(Shape_Leng))

print(unmatched)
```

There are multiple missing values after joining the table. This is due to different spacings of province name. Let us check using the code below

```{r}
check_value <- tourism %>%
  filter(province_eng %in% c("Buriram", "Chainat", "Chonburi", "Lopburi", "Nong Bua Lamphu", "Phang Nga", "Prachinburi", "Sisaket"))

print(check_value)
```

```{r}
check_value2 <- boundary %>%
  filter(province_eng %in% c("Buri Ram", "Chai Nat", "Chon Buri", "Lop Buri", "Nong Bua Lam Phu", "Phangnga", "Prachin Buri", "Si Sa Ket"))

print(check_value2)
```

Notice that the writings are inconsistent. Let us standardize it by changing the name in the boundary data

```{r}
boundary <- boundary %>%
  mutate(province_eng = recode(province_eng,
                          "Buri Ram" = "Buriram",
                          "Chai Nat" = "Chainat",
                          "Chon Buri" = "Chonburi",
                          "Nong Bua Lam Phu" = "Nong Bua Lamphu",
                          "Phangnga" = "Phang Nga",
                          "Prachin Buri" = "Prachinburi",
                          "Si Sa Ket" = "Sisaket",
                          "Lop Buri" = "Lopburi"))
```

Let us join the table again

```{r}
thai_tourism <- left_join(boundary, tourism_data, by = c("province_eng"))
```

Let us do final check if there is any missing value

```{r}
missing <- thai_tourism %>% 
  filter(is.na(Shape_Leng))

print(missing)
```

There is no missing value in the final dataset. The dataset is ready to be used for analysis

### 3.4 Creating a Time Series Cube

Let us create a time series cube based on the revenue generated from tourism in Thailand

```{r}
tourism_revenue <- tourism %>%
  filter(variable %in% c("revenue_all"))
```

Derive a dataframe grouped by the year and province in Thailand

```{r}
tourism_revenue <- tourism_revenue %>%
  group_by(year, province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourism_revenue <- tourism_revenue %>%
  pivot_wider(names_from = variable, values_from = value)
```

```{r}
tourism_st <- spacetime(tourism_revenue, boundary,
                      .loc_col = "province_eng",
                      .time_col = "year")
```

```{r}
is_spacetime_cube(tourism_st)
```

## 4 Geographically Weighted Summary Statistics

### 4.1 Mapping Revenue

```{r}
class(thai_tourism)
```

```{r}
basemap <- tm_shape(thai_tourism) +
  tm_polygons() +
  tm_text("province_eng", size=0.5)

gdppc <- qtm(thai_tourism, "revenue_all")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

```{r}
basemap <- tm_shape(thai_tourism) +
  tm_polygons() +
  tm_text("province_eng", size=0.5)

gdppc <- qtm(thai_tourism, "no_tourist_thai")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

```{r}
basemap <- tm_shape(thai_tourism) +
  tm_polygons() +
  tm_text("province_eng", size=0.5)

gdppc <- qtm(thai_tourism, "no_tourist_foreign")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

**Findings:**

From the choropleth map, we can roughly see that most foreign tourist visits Bangkok area and Chonburi area, which makes the revenue from tourist are heavy on the Bangkok area, while thailand tourists are more spread out across the region.

### 4.2 Converting to SpatialPolygonDataFrame

```{r}
thai_tourism_sp <- thai_tourism %>% 
  as_Spatial()
```

### 4.3 Geographically Weighted Summary Statistics with Adaptive Bandwidth

#### 4.3.1 Determine Adaptive Bandwidth

::: panel-tabset
#### Cross-Validation

```{r}
bw_CV <- bw.gwr(revenue_all ~ 1, 
             data = thai_tourism_sp,
             approach = "CV",
             adaptive = TRUE, 
             kernel = "bisquare", 
             longlat = T)
```

```{r}
bw_CV
```

#### AIC

```{r}
bw_AIC <- bw.gwr(revenue_all ~ 1, 
             data = thai_tourism_sp,
             approach ="AIC",
             adaptive = TRUE, 
             kernel = "bisquare", 
             longlat = T)
```

```{r}
bw_AIC
```
:::

#### 4.3.2 Computing Geographically Weighted Summary Statistics

```{r}
gwstat <- gwss(data = thai_tourism_sp,
               vars = "revenue_all",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

```{r}
gwstat
```

#### 4.3.3 Prepare Output Data

```{r}
gwstat_tourism <- as.data.frame(gwstat$SDF)
```

```{r}
thai_gstat <- cbind(thai_tourism, gwstat_tourism)
```

#### 4.3.4 Visualizing Geographically Weighted Summary Statistics

```{r}
tm_shape(thai_gstat) +
  tm_fill("revenue_all_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Revenue Distribution",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.text.size = 0.5,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

### 4.4 Geographically Weighted Summary Statistics with Fixed Bandwidth

#### 4.4.1 Computing fixed bandwidth

```{r}
gwstat <- gwss(data = thai_tourism_sp,
               vars = "revenue_all",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = FALSE,
               longlat = T)
```

#### 4.4.2 Prepare Output Data

```{r}
gwstat_tourism <- as.data.frame(gwstat$SDF)
```

```{r}
thai_gstat <- cbind(thai_tourism, gwstat_tourism)
```

#### 4.4.3 Visualizing Geographically Weighted Summary Statistics

```{r}
tm_shape(thai_gstat) +
  tm_fill("revenue_all_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Revenue Distribution",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.text.size = 0.5,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

## 5 Global Measures of Spatial Association

### 5.1 Deriving Queen's Contiguity Weights

```{r}
wm_q <- poly2nb(thai_tourism, queen=TRUE)
summary(wm_q)
```

### 5.2 Row-standardised weights matrix

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

### 5.3 Computing Global Moran's I

```{r}
moran.test(thai_tourism$revenue_all, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

```{r}
moran.test(thai_tourism$revenue_foreign, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

```{r}
moran.test(thai_tourism$revenue_thai, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

```{r}
moran.test(thai_tourism$no_tourist_all, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

## 6 Local Measures of Spatial Association

### 6.1 Local Indicators of Spatial Association (LISA)

#### 6.1.1 Computing Contiguity Spatial Weights (QUEEN)

```{r}
wm_q <- poly2nb(thai_tourism, 
                queen=TRUE)
summary(wm_q)
```

#### 6.1.2 Row Standardized Weights Matrix

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

#### 6.1.3 Local Moran's I

::: panel-tabset
### Computing Local Moran's I

```{r}
fips <- order(thai_tourism$province_eng)
localMI <- localmoran(thai_tourism$revenue_all, rswm_q)
head(localMI)
```

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=thai_tourism$province_eng[fips]),
  check.names=FALSE)
```

```{r}
thai_tourism.localMI <- cbind(thai_tourism,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

### Local Moran's I Values

```{r}
tm_shape(thai_tourism.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

### p-values

```{r}
tm_shape(thai_tourism.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```
:::

#### 6.1.4 Creating LISA Cluster Map

```{r}
nci <- moran.plot(thai_tourism$revenue_all, rswm_q,
                  labels=as.character(thai_tourism$province_eng), 
                  xlab="Revenue from Tourist", 
                  ylab="Spatially Lag Revenue from Tourist")
```

As seen from the scatter plot, it can be seen that Chonburi, Phuket and Bangkok is way further from the cluster

#### 6.1.5 Preparing LISA Map Classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

```{r}
thai_tourism$lag_revenue <- lag.listw(rswm_q, thai_tourism$revenue_all)
DV <- thai_tourism$lag_revenue - mean(thai_tourism$lag_revenue)     
```

Centering local Moran around the mean value

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Set a statistical significance level

```{r}
signif <- 0.05
```

```{r}
quadrant[DV <0 & LM_I<0] <- 1 # low low
quadrant[DV >0 & LM_I<0] <- 2 # high low
quadrant[DV <0 & LM_I<0] <- 3 # low high
quadrant[DV >0 & LM_I>0] <- 4 # high high
```

The non significant value of Moran will be placed in category 0

```{r}
quadrant[localMI[,5]>signif] <- 0
```

#### 6.1.6 Plotting LISA Map

```{r}
thai_tourism.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(thai_tourism.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

From the LISA Map, we can see that all the provinces surrounding **Bangkok** is a low-high autocorrelation, which means that all the surrounding provinces are low outlier, whereas Bangkok is a high outlier in terms of revenue from all tourists.

## 7 Hot Spot and Cold Spot Area Analysis

### 7.1 Computing Local Gi\* Statistics

```{r}
wm_idw <- thai_tourism %>%
  mutate(nb = include_self(
    st_contiguity(geometry)),
    wts = st_inverse_distance(nb, 
                              geometry, 
                              scale = 1,
                              alpha = 1),
         .before = 1)
```

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    revenue_all, nb, wts, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

### 7.2 Visualising Gi\*

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

### 7.3 Visualising p-value of HCSA

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") + 
  tm_borders(alpha = 0.5)
```

### 7.4 Visualising Hot Spot and Cold Spot Area

```{r}
HCSA_sig <- HCSA  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
tm_shape(HCSA) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
  tm_fill("cluster") + 
  tm_borders(alpha = 0.4)
```

**Findings:** There is no hotspot area in the plot above and there are coldspots identified in Ubon-Ratchathani, Yasothon, Roi Et and Mukdahan provinces.

## 8 Correlation Analysis

```{r}
cluster_vars.cor = cor(tourism_data[,2:9])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

From the correlation analysis, there is an interesting finding. Overall revenue are strongly correlated with number of foreign tourist, but it's less stronger with the number of thai tourists. This may be due to foreign tourists contributing more revenue and spending more money as compared to local tourists.

## 9 Emerging Hotspot Analysis

### 9.1 Creating Time Series Cube

Let us create a time series cube based on the revenue generated from tourism in Thailand

```{r}
tourism_revenue <- tourism %>%
  filter(variable %in% c("revenue_all"))
```

```{r}
tourism_revenue <- left_join(boundary, tourism_revenue, by = c("province_eng"))
```

Derive a dataframe grouped by the year and province in Thailand

```{r}
tourism_revenue <- tourism_revenue %>%
  group_by(year, province_eng, geometry) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourism_revenue <- tourism_revenue %>%
  pivot_wider(names_from = variable, values_from = value)
```

```{r}
tourism_st <- spacetime(tourism_revenue, boundary,
                      .loc_col = "province_eng",
                      .time_col = "year")
```

```{r}
is_spacetime_cube(tourism_st)
```

### 9.2 Computing Gi\*

#### 9.2.1 Deriving the Spatial Weights

```{r}
tourism_nb <- tourism_st %>%
  activate("geometry") %>%
  mutate(nb = include_self(
    st_contiguity(geometry)),
    wt = st_inverse_distance(nb, 
                             geometry, 
                             scale = 1,
                             alpha = 1),
    .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

#### 9.2.2 Computing Gi\*

```{r}
gi_stars <- tourism_nb %>% 
  group_by(year) %>% 
  mutate(gi_star = local_gstar_perm(
    revenue_all, nb, wt)) %>% 
  tidyr::unnest(gi_star)
```

```{r}
gi_stars
```

### 9.3 Mann-Kendall Test

#### 9.3.1 Hypothesis and Interpretation

H0: There is no monotonic trend over time

H1: Monotonic trend is present

Reject null hypothesis if the p-value is smaller than alpha value

Tau range interpretation:

-   -1 = perfectly decreasing series

-   1 = perfectly increasing series

#### 9.3.2 Mann-Kendall Test on Gi

Let us choose Bangkok to analyze as Bangkok has the highest revenue from tourism

```{r}
cbg <- gi_stars %>% 
  ungroup() %>% 
  filter(province_eng == "Bangkok") |> 
  select(province_eng, year, gi_star)
```

```{r}
ggplot(data = cbg, 
       aes(x = year, 
           y = gi_star)) +
  geom_line() +
  theme_light()
```

**Findings:**

1.  From 2019 to 2022, the Gi\* value decreases, which indicates that there is an increasing trend towards cold spots during this period of time
2.  From 2022 to 2023, the Gi\* value increases, which indicates that the spatial clustering increases towards hot spots in this period

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

The p-value is 0.22, we do not reject null hypothesis and conclude that there is no monotonic trend (Bangkok)

We can see the overall result per province using the following code

```{r}
ehsa <- gi_stars %>%
  group_by(province_eng) %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
head(ehsa)
```

```{r}
ehsa_desc <- ehsa %>%
  arrange(desc(tau))

head(ehsa_desc)
```

**Findings:** The shown sorted table is based on the Tau range, which shows that the value shown has increasing trend. The consistent growth indicates that there is potential growth in tourism revenue in these provinces.

```{r}
ehsa_asc <- ehsa %>%
  arrange(tau)

head(ehsa_asc)
```

**Findings:** The provinces shown in above table indicates that those are the provinces with decreasing series. It is interesting to find that Bangkok is part of the top 5 decreasing series even though Bangkok has the highest revenue in tourism. This indicates that the tourism sector should pay more attention to these provinces and avoid decreasing trend.

## 10 Conclusion

From the analysis, we can find that **Bangkok** area has a lot of tourism activity, but it doesnt show monotonic trend over time, which indicates that it is not an increasing trend and it fluctuates randomly over time. Under the hotspot and coldspot analysis, we can find that the Ubon-Ratchathani, Yasothon, Roi Et and Mukdahan provinces are considered as cold spots. This might indicate that these provinces lack of tourism infrastructure. It is a potential area for the Thailand tourism sector to pay more attention to and drive tourism traffic to the cold spots area and maintain stability of tourism activity in Bangkok area.
