---
title: "Hands-on Exercise 5"
author: "Brigitta Karen Tsai"
date: "September 16, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Part 1: Global Measures of Spatial Autocorrelation

## Data Preparation

### Load R Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

### Import Dataset into R

1.  Import shapefile

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

2.  Import csv file

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

3.  Perform join table

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

4.  Visualising Regional Development Indicator

Distribution of GDPPC 2012

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## Global Measures of Spatial Autocorrelation

This section is to learn how to compute **global spatial autocorrelation statistics** and to perform **spatial complete randomness test** for global spatial autocorrelation

### Computing Contiguity Spatial Weights

Queen contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

The summary report shows that there are 88 regions in Hunan and the most connected has 11 links

### Row-standardised weights matrix

Assign equal weight and standardize the weights using the fraction 1/no. of neighbours

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

For the code above, we use style "W". However, there are other styles that we can use:

1.  B is for basic binary coding
2.  W is row standardised (sums over all links to n)
3.  C is globally standardised (sums over all links to n)
4.  U is equal to C divided by no. of neighbours (sums over all links to unity)
5.  S is the variance-stabilizing coding scheme

## Global Measures of Spatial Autocorrelation: Moran's I

### Moran's I Test

The code below performs Moran I's statistical testing

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

The Moran I summary statistics shows positive value, meaning that there is a moderate level of positive spatial autocorrelation

### Monte Carlo Moran's I

The code will perform 1000 simulation

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

The summary statistics shows a positive value in the spatial autocorrelation, meaning similar values tend to cluster

### Visualising Monte Carlo Moran's I

Visualize to examine the simulated Moran's I test statistics in more detail. Visualize by plotting distribution of the statistical value as a histogram

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

From the graph, we can conclude that the distribution is right-skewed, meaning that there are more small values

## Global Measures of Spatial Autocorrelation: Geary's C

### Geary's C Test

The code chunk below is to perform Geary's C test for spatial autocorrelation

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

The Geary C Statistics value is \<1, it indicates that there is positive spatial autocorrelation

### Computing Monte Carlo Geary's C

The code chunk below performs permutation test for Geary's C statistics

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

The summary statistics shows that there is positive autocorrelation, meaning that similar GDPPC tend to cluster. Low p-value indicates reject null hypothesis

### Visualising the Monte Carlo Geary's C

Plot histogram using the code below

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

The statistical value is normally distributed

## Spatial Correlogram

Spatial correlogram is used to examine patterns of spatial autocorrelation in the data or model residuals

### Compute Moran's I Correlogram

In the code chunk below, the function **sp.correlogram()** is used to compute a 6-lag spatial correlogram of GDPPC

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

Plotting output does not provide complete interpretation because not all autocorrelation values are statistically significant

```{r}
print(MI_corr)
```

### Compute Geary's C Correlogram and Plot

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

```{r}
print(GC_corr)
```

# Part 2: Local Measures of Spatial Autocorrelation

### 

## Local Indicators of Spatial Association (LISA)

LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable

### Computing Contiguity Spatial Weights

Queen contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

### Row-standardised weights matrix

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

### Computing Local Moran's I

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

localmoran() function returns a matrix of values whose columns are:

-   li: the local Moran's I statistics

-   E.li: the expectation of local moran statistics under randomisation hypothesis

-   Var.li: the variance of local moran statistics under randomisation hypothesis

-   Z.li: the standard deviation of local moran statistics

-   Pr(): the p-value of local moran statistics

The code below lists the content of the local moran matrix derived using **printCoefmat()**

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```

#### Mapping the local Moran's I

Before mapping, it is better to append the local moran's dataframe onto hunan Spatial Polygon Data Frame (hunan.localMI)

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### Mapping local Moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

#### Mapping local Moran's I p-values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## Creating LISA Cluster Map

### Plotting Moran scatter plot

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

### Plotting Moran scatter plot with standardised variable

Use **scale()** to center and scale the variable. Centering is done by substracting the mean (remove missing values) the corresponding columns, and scaling is done by dividing the centered variable by their standard deviation

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector()
```

**as.vector** is added to make sure that the data type we get out of this is a vector, that map neatly into out dataframe

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### Preparing LISA Map Classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, derive the spatially lagged variable of interest (GDPPC) and center the spatially lagged variable around its mean

```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
```

Centering local Moran's around the mean

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Set a statistical significance level

```{r}
signif <- 0.05
```

```{r}
quadrant[DV <0 & LM_I<0] <- 1 # low low
quadrant[DV >0 & LM_I<0] <- 2 # high low
quadrant[DV <0 & LM_I<0] <- 3 # low high
quadrant[DV >0 & LM_I>0] <- 4 # high high
```

Place non significant Moran in the category 0

```{r}
quadrant[localMI[,5]>signif] <- 0
```

### Plotting LISA Map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

## Hot Spot and Cold Spot Area Analysis

### Getis and Ord's G-Statistics

To detect spatial anomalies

The analysis consists of 3 steps:

1.  Deriving spatial weight matrix
2.  Computing Gi Statistics
3.  Mapping Gi Statistics

### Deriving distance-based weight matrix

There are 2 types of distance-based proximity matrix:

1.  fixed distance weight matrix
2.  adaptive distance weight matrix

#### Deriving the centroid

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

#### Determine the cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

#### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

### Computing adaptive distance weight matrix

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## Computing Gi Statistics

### Gi Statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

### Mapping Gi Values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

### Gi Statistics using adaptive distance

```{r}
fips <- order(hunan$County)
```

```{r}
gi.adaptive <- localG(hunan$GDPPC,wm62_lw)
```

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with adaptive distance weights

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
