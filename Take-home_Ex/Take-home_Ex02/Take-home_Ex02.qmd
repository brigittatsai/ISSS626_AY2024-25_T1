---
title: "Take-home Exercise 2"
author: "Brigitta Karen Tsai"
date: "October 6, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Take-home Exercise 2: Discovering Impact of COVID-19 on Thailand Tourism Economy at Province Level using Spatial and Spatio-temporal Statistics

## 1 Overview

### 1.1 Background

### 1.2 Objectives

In this analysis, we are interested to discover:

-   If the key indicators of tourism economy of Thailand are independent from space and time

## 2 Getting Started

### 2.1 Installing and Loading R Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, GGally, GWmodel,
               ggstatsplot, Kendall, plotly, sfdep)
```

### 2.2 Importing Dataset

::: panel-tabset
### Aspatial Data

```{r}
tourism <- read_csv("data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv") %>% 
  mutate(year = year(date))
```

### Geospatial Data

```{r}
boundary <- st_read(dsn = "data/geospatial",
                        layer = "tha_admbnda_adm1_rtsd_20220121") %>% 
  st_transform(crs = 32647)
```
:::

## 3 Data Wrangling

### 3.1 Geospatial Data Wrangling

```{r}
boundary <- boundary %>%
  rename(province_eng = ADM1_EN)
```

```{r}
boundary <- boundary[, !(names(boundary) %in% c("ADM3_REF", "ADM3ALT1EN", "ADM3ALT2EN", "ADM3ALT1TH", "ADM3ALT2TH", "ADM3_TH","ADM2_TH", "ADM1_TH", "ADM0_TH", "ADM0_EN", "ADM0_PCODE", "ADM3_PCODE", "ADM2_PCODE", "validOn", "validTo", "ADM1_PCODE", "date", "ADM1_REF", "ADM1ALT1EN", "ADM1ALT2EN", "ADM1ALT1TH", "ADM1ALT2TH"))]
```

```{r}
boundary[is.na(boundary$Shape_Leng), ]
```

### 3.2 Aspatial Data Wrangling

```{r}
tourism <- tourism[, !(names(tourism) %in% c("province_thai", "region_thai"))]
```

```{r}
unique(tourism$variable)
```

```{r}
options(scipen = 999) # to display full number when summing up the value column
```

**Revenue generated by tourism industry**

```{r}
revenue_all <- tourism %>%
  filter(tourism$variable %in% c("revenue_all"))
```

```{r}
revenue_all <- revenue_all %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
revenue_all <- revenue_all %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Revenue generated by Thai tourists**

```{r}
revenue_thai <- tourism %>%
  filter(tourism$variable %in% c("revenue_thai"))
```

```{r}
revenue_thai <- revenue_thai %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
revenue_thai <- revenue_thai %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Revenue generated by foreign tourists**

```{r}
revenue_foreign <- tourism %>%
  filter(tourism$variable %in% c("revenue_foreign"))
```

```{r}
revenue_foreign <- revenue_foreign %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
revenue_foreign <- revenue_foreign %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Number of tourists who stay overnight**

```{r}
tourist_stay <- tourism %>%
  filter(tourism$variable %in% c("no_tourist_stay"))
```

```{r}
tourist_stay <- tourist_stay %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourist_stay <- tourist_stay %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Number of domestic tourists who visited the province**

```{r}
tourist_all <- tourism %>%
  filter(tourism$variable %in% c("no_tourist_all"))
```

```{r}
tourist_all <- tourist_all %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourist_all <- tourist_all %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Number of Thai tourists who visited the province**

```{r}
tourist_thai <- tourism %>%
  filter(tourism$variable %in% c("no_tourist_thai"))
```

```{r}
tourist_thai <- tourist_thai %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourist_thai <- tourist_thai %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Number of foreign tourists who visited the province**

```{r}
tourist_foreign <- tourism %>%
  filter(tourism$variable %in% c("no_tourist_foreign"))
```

```{r}
tourist_foreign <- tourist_foreign %>%
  group_by(province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourist_foreign <- tourist_foreign %>%
  pivot_wider(names_from = variable, values_from = value)
```

**Ratio of tourist stay overnight**

Ratio = Total rooms booked/ total available rooms

```{r}
ratio_tourist <- tourism %>%
  filter(tourism$variable %in% c("ratio_tourist_stay"))
```

For this column, we will use **median** to aggregate the values as it is not appropriate to sum ratio values

```{r}
ratio_tourist <- ratio_tourist %>%
  group_by(province_eng) %>%
  summarize(value = median(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
ratio_tourist <- ratio_tourist %>%
  pivot_wider(names_from = variable, values_from = value)
```

### 3.3 Join Tables

#### 3.3.1 Join Aspatial Data

As seen in previous section, the tourism dataset is divided into each variables to sum the values. Let's first join the tourism dataset into 1 again.

```{r}
tourism_data <- revenue_all %>%
  left_join(revenue_thai, by = "province_eng") %>%
  left_join(revenue_foreign, by = "province_eng") %>%
  left_join(tourist_stay, by = "province_eng") %>% 
  left_join(tourist_all, by = "province_eng") %>% 
  left_join(tourist_thai, by = "province_eng") %>% 
  left_join(tourist_foreign, by = "province_eng") %>% 
  left_join(ratio_tourist, by = "province_eng")
```

#### 3.3.2 Join Aspatial and Geospatial Data

Now, let us join both boundary and tourism data

```{r}
thai_tourism <- left_join(boundary, tourism_data, by = c("province_eng"))
```

Let us check if there is unmatched rows to ensure data is accurate

```{r}
unmatched <- thai_tourism %>% 
  filter(is.na(Shape_Leng))

print(unmatched)
```

There are multiple missing values after joining the table. This is due to different spacings of province name. Let us check using the code below

```{r}
check_value <- tourism %>%
  filter(province_eng %in% c("Buriram", "Chainat", "Chonburi", "Lopburi", "Nong Bua Lamphu", "Phang Nga", "Prachinburi", "Sisaket"))

print(check_value)
```

```{r}
check_value2 <- boundary %>%
  filter(province_eng %in% c("Buri Ram", "Chai Nat", "Chon Buri", "Lop Buri", "Nong Bua Lam Phu", "Phangnga", "Prachin Buri", "Si Sa Ket"))

print(check_value2)
```

Notice that the writings are inconsistent. Let us standardize it by changing the name in the boundary data

```{r}
boundary <- boundary %>%
  mutate(province_eng = recode(province_eng,
                          "Buri Ram" = "Buriram",
                          "Chai Nat" = "Chainat",
                          "Chon Buri" = "Chonburi",
                          "Nong Bua Lam Phu" = "Nong Bua Lamphu",
                          "Phangnga" = "Phang Nga",
                          "Prachin Buri" = "Prachinburi",
                          "Si Sa Ket" = "Sisaket",
                          "Lop Buri" = "Lopburi"))
```

Let us join the table again

```{r}
thai_tourism <- left_join(boundary, tourism_data, by = c("province_eng"))
```

Let us do final check if there is any missing value

```{r}
missing <- thai_tourism %>% 
  filter(is.na(Shape_Leng))

print(missing)
```

There is no missing value in the final dataset. The dataset is ready to be used for analysis

### 3.4 Creating a Time Series Cube

Let us create a time series cube based on the revenue generated from tourism in Thailand

```{r}
tourism_revenue <- tourism %>%
  filter(variable %in% c("revenue_all"))
```

Derive a dataframe grouped by the year and province in Thailand

```{r}
tourism_revenue <- tourism_revenue %>%
  group_by(year, province_eng) %>%
  summarize(value = sum(value, na.rm = TRUE),
            variable = first(variable))
```

```{r}
tourism_revenue <- tourism_revenue %>%
  pivot_wider(names_from = variable, values_from = value)
```

```{r}
tourism_st <- spacetime(tourism_revenue, boundary,
                      .loc_col = "province_eng",
                      .time_col = "year")
```

```{r}
is_spacetime_cube(tourism_st)
```

## 4 Geographically Weighted Summary Statistics

### 4.1 Mapping Revenue

```{r}
class(thai_tourism)
```

```{r}
basemap <- tm_shape(thai_tourism) +
  tm_polygons() +
  tm_text("province_eng", size=0.5)

gdppc <- qtm(thai_tourism, "revenue_all")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

```{r}
basemap <- tm_shape(thai_tourism) +
  tm_polygons() +
  tm_text("province_eng", size=0.5)

gdppc <- qtm(thai_tourism, "no_tourist_thai")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

```{r}
basemap <- tm_shape(thai_tourism) +
  tm_polygons() +
  tm_text("province_eng", size=0.5)

gdppc <- qtm(thai_tourism, "no_tourist_foreign")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

**Findings:**

From the choropleth map, we can roughly see that most foreign tourist visits Bangkok area and Chonburi area, which makes the revenue from tourist are heavy on the Bangkok area, while thailand tourists are more spread out across the region.

### 4.2 Converting to SpatialPolygonDataFrame

```{r}
thai_tourism_sp <- thai_tourism %>% 
  as_Spatial()
```

### 4.3 Geographically Weighted Summary Statistics with Adaptive Bandwidth

#### 4.3.1 Determine Adaptive Bandwidth

::: panel-tabset
#### Cross-Validation

```{r}
bw_CV <- bw.gwr(revenue_all ~ 1, 
             data = thai_tourism_sp,
             approach = "CV",
             adaptive = TRUE, 
             kernel = "bisquare", 
             longlat = T)
```

```{r}
bw_CV
```

#### AIC

```{r}
bw_AIC <- bw.gwr(revenue_all ~ 1, 
             data = thai_tourism_sp,
             approach ="AIC",
             adaptive = TRUE, 
             kernel = "bisquare", 
             longlat = T)
```

```{r}
bw_AIC
```
:::

#### 4.3.2 Computing Geographically Weighted Summary Statistics

```{r}
gwstat <- gwss(data = thai_tourism_sp,
               vars = "revenue_all",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

```{r}
gwstat
```

#### 4.3.3 Prepare Output Data

```{r}
gwstat_tourism <- as.data.frame(gwstat$SDF)
```

```{r}
thai_gstat <- cbind(thai_tourism, gwstat_tourism)
```

#### 4.3.4 Visualizing Geographically Weighted Summary Statistics

```{r}
tm_shape(thai_gstat) +
  tm_fill("revenue_all_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Revenue Distribution",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.text.size = 0.5,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

### 4.4 Geographically Weighted Summary Statistics with Fixed Bandwidth

#### 4.4.1 Computing fixed bandwidth

```{r}
gwstat <- gwss(data = thai_tourism_sp,
               vars = "revenue_all",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = FALSE,
               longlat = T)
```

#### 4.4.2 Prepare Output Data

```{r}
gwstat_tourism <- as.data.frame(gwstat$SDF)
```

```{r}
thai_gstat <- cbind(thai_tourism, gwstat_tourism)
```

#### 4.4.3 Visualizing Geographically Weighted Summary Statistics

```{r}
tm_shape(thai_gstat) +
  tm_fill("revenue_all_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Revenue Distribution",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.text.size = 0.5,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

## 5 Global Measures of Spatial Association

### 5.1 Deriving Queen's Contiguity Weights

```{r}
wm_q <- poly2nb(thai_tourism, queen=TRUE)
summary(wm_q)
```

### 5.2 Row-standardised weights matrix

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

### 5.3 Computing Global Moran's I

```{r}
moran.test(thai_tourism$revenue_all, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

```{r}
moran.test(thai_tourism$revenue_foreign, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

```{r}
moran.test(thai_tourism$revenue_thai, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

```{r}
moran.test(thai_tourism$no_tourist_all, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

## 6 Exploratory Data Analysis

```{r}
barplot(height = thai_tourism$revenue_all[order(-thai_tourism$revenue_all)][1:5],
        names.arg = thai_tourism$province_eng[1:5],
        col = "skyblue",
        main = "Top 5 Tourism Revenue per Province",
        xlab = "Category",
        ylab = "Values")
```
