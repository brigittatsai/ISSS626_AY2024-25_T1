{
  "hash": "6d5d55cd1e7b2b1f26b5e1be2ce06c57",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2\"\nauthor: \"Brigitta Karen Tsai\"\ndate: \"October 6, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Take-home Exercise 2: Discovering Impact of COVID-19 on Thailand Tourism Economy at Province Level using Spatial and Spatio-temporal Statistics\n\n## 1 Overview\n\n### 1.1 Background\n\n### 1.2 Objectives\n\nIn this analysis, we are interested to discover:\n\n-   If the key indicators of tourism economy of Thailand are independent from space and time\n\n## 2 Getting Started\n\n### 2.1 Installing and Loading R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, GGally, GWmodel,\n               ggstatsplot, Kendall, plotly, sfdep)\n```\n:::\n\n\n### 2.2 Importing Dataset\n\n::: panel-tabset\n### Aspatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- read_csv(\"data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv\") %>% \n  mutate(year = year(date))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30800 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): province_thai, province_eng, region_thai, region_eng, variable\ndbl  (1): value\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n### Geospatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary <- st_read(dsn = \"data/geospatial\",\n                        layer = \"tha_admbnda_adm1_rtsd_20220121\") %>% \n  st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\brigittatsai\\ISSS626_AY2024-25_T1\\Take-home_Ex\\Take-home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n:::\n\n## 3 Data Wrangling\n\n### 3.1 Geospatial Data Wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary <- boundary %>%\n  rename(province_eng = ADM1_EN)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary <- boundary[, !(names(boundary) %in% c(\"ADM3_REF\", \"ADM3ALT1EN\", \"ADM3ALT2EN\", \"ADM3ALT1TH\", \"ADM3ALT2TH\", \"ADM3_TH\",\"ADM2_TH\", \"ADM1_TH\", \"ADM0_TH\", \"ADM0_EN\", \"ADM0_PCODE\", \"ADM3_PCODE\", \"ADM2_PCODE\", \"validOn\", \"validTo\", \"ADM1_PCODE\", \"date\", \"ADM1_REF\", \"ADM1ALT1EN\", \"ADM1ALT2EN\", \"ADM1ALT1TH\", \"ADM1ALT2TH\"))]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary[is.na(boundary$Shape_Leng), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 0 features and 3 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n[1] Shape_Leng   Shape_Area   province_eng geometry    \n<0 rows> (or 0-length row.names)\n```\n\n\n:::\n:::\n\n\n### 3.2 Aspatial Data Wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tourism[, !(names(tourism) %in% c(\"province_thai\", \"region_thai\"))]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(tourism$variable)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ratio_tourist_stay\" \"no_tourist_stay\"    \"no_tourist_all\"    \n[4] \"no_tourist_thai\"    \"no_tourist_foreign\" \"revenue_all\"       \n[7] \"revenue_thai\"       \"revenue_foreign\"   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 999) # to display full number when summing up the value column\n```\n:::\n\n\n**Revenue generated by tourism industry**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_all <- tourism %>%\n  filter(tourism$variable %in% c(\"revenue_all\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_all <- revenue_all %>%\n  group_by(province_eng) %>%\n  summarize(value = sum(value, na.rm = TRUE),\n            variable = first(variable))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_all <- revenue_all %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n**Revenue generated by Thai tourists**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_thai <- tourism %>%\n  filter(tourism$variable %in% c(\"revenue_thai\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_thai <- revenue_thai %>%\n  group_by(province_eng) %>%\n  summarize(value = sum(value, na.rm = TRUE),\n            variable = first(variable))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_thai <- revenue_thai %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n**Revenue generated by foreign tourists**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_foreign <- tourism %>%\n  filter(tourism$variable %in% c(\"revenue_foreign\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_foreign <- revenue_foreign %>%\n  group_by(province_eng) %>%\n  summarize(value = sum(value, na.rm = TRUE),\n            variable = first(variable))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_foreign <- revenue_foreign %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n**Number of tourists who stay overnight**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_stay <- tourism %>%\n  filter(tourism$variable %in% c(\"no_tourist_stay\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_stay <- tourist_stay %>%\n  group_by(province_eng) %>%\n  summarize(value = sum(value, na.rm = TRUE),\n            variable = first(variable))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_stay <- tourist_stay %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n**Number of domestic tourists who visited the province**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_all <- tourism %>%\n  filter(tourism$variable %in% c(\"no_tourist_all\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_all <- tourist_all %>%\n  group_by(province_eng) %>%\n  summarize(value = sum(value, na.rm = TRUE),\n            variable = first(variable))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_all <- tourist_all %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n**Number of Thai tourists who visited the province**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_thai <- tourism %>%\n  filter(tourism$variable %in% c(\"no_tourist_thai\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_thai <- tourist_thai %>%\n  group_by(province_eng) %>%\n  summarize(value = sum(value, na.rm = TRUE),\n            variable = first(variable))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_thai <- tourist_thai %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n**Number of foreign tourists who visited the province**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_foreign <- tourism %>%\n  filter(tourism$variable %in% c(\"no_tourist_foreign\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_foreign <- tourist_foreign %>%\n  group_by(province_eng) %>%\n  summarize(value = sum(value, na.rm = TRUE),\n            variable = first(variable))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_foreign <- tourist_foreign %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n**Ratio of tourist stay overnight**\n\nRatio = Total rooms booked/ total available rooms\n\n\n::: {.cell}\n\n```{.r .cell-code}\nratio_tourist <- tourism %>%\n  filter(tourism$variable %in% c(\"ratio_tourist_stay\"))\n```\n:::\n\n\nFor this column, we will use **median** to aggregate the values as it is not appropriate to sum ratio values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nratio_tourist <- ratio_tourist %>%\n  group_by(province_eng) %>%\n  summarize(value = median(value, na.rm = TRUE),\n            variable = first(variable))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nratio_tourist <- ratio_tourist %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n### 3.3 Join Tables\n\n#### 3.3.1 Join Aspatial Data\n\nAs seen in previous section, the tourism dataset is divided into each variables to sum the values. Let's first join the tourism dataset into 1 again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_data <- revenue_all %>%\n  left_join(revenue_thai, by = \"province_eng\") %>%\n  left_join(revenue_foreign, by = \"province_eng\") %>%\n  left_join(tourist_stay, by = \"province_eng\") %>% \n  left_join(tourist_all, by = \"province_eng\") %>% \n  left_join(tourist_thai, by = \"province_eng\") %>% \n  left_join(tourist_foreign, by = \"province_eng\") %>% \n  left_join(ratio_tourist, by = \"province_eng\")\n```\n:::\n\n\n#### 3.3.2 Join Aspatial and Geospatial Data\n\nNow, let us join both boundary and tourism data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_tourism <- left_join(boundary, tourism_data, by = c(\"province_eng\"))\n```\n:::\n\n\nLet us check if there is unmatched rows to ensure data is accurate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunmatched <- thai_tourism %>% \n  filter(is.na(Shape_Leng))\n\nprint(unmatched)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 0 features and 11 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n [1] Shape_Leng         Shape_Area         province_eng       revenue_all       \n [5] revenue_thai       revenue_foreign    no_tourist_stay    no_tourist_all    \n [9] no_tourist_thai    no_tourist_foreign ratio_tourist_stay geometry          \n<0 rows> (or 0-length row.names)\n```\n\n\n:::\n:::\n\n\nThere are multiple missing values after joining the table. This is due to different spacings of province name. Let us check using the code below\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_value <- tourism %>%\n  filter(province_eng %in% c(\"Buriram\", \"Chainat\", \"Chonburi\", \"Lopburi\", \"Nong Bua Lamphu\", \"Phang Nga\", \"Prachinburi\", \"Sisaket\"))\n\nprint(check_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,200 × 6\n   date       province_eng    region_eng     variable           value  year\n   <date>     <chr>           <chr>          <chr>              <dbl> <dbl>\n 1 2019-01-01 Lopburi         central        ratio_tourist_stay  61.3  2019\n 2 2019-01-01 Chainat         central        ratio_tourist_stay  79.3  2019\n 3 2019-01-01 Chonburi        east           ratio_tourist_stay  84.3  2019\n 4 2019-01-01 Prachinburi     east           ratio_tourist_stay  68.6  2019\n 5 2019-01-01 Phang Nga       south          ratio_tourist_stay  86.5  2019\n 6 2019-01-01 Buriram         east_northeast ratio_tourist_stay  71.3  2019\n 7 2019-01-01 Sisaket         south          ratio_tourist_stay  68.6  2019\n 8 2019-01-01 Nong Bua Lamphu east_northeast ratio_tourist_stay  65.0  2019\n 9 2020-01-01 Lopburi         central        ratio_tourist_stay  51.5  2020\n10 2020-01-01 Chainat         central        ratio_tourist_stay  73.5  2020\n# ℹ 3,190 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_value2 <- boundary %>%\n  filter(province_eng %in% c(\"Buri Ram\", \"Chai Nat\", \"Chon Buri\", \"Lop Buri\", \"Nong Bua Lam Phu\", \"Phangnga\", \"Prachin Buri\", \"Si Sa Ket\"))\n\nprint(check_value2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 8 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 349324.1 ymin: 856050.4 xmax: 1137931 ymax: 1959175\nProjected CRS: WGS 84 / UTM zone 47N\n  Shape_Leng Shape_Area     province_eng                       geometry\n1   5.693342  0.5457884         Lop Buri MULTIPOLYGON (((751293.3 17...\n2   2.896316  0.2090783         Chai Nat MULTIPOLYGON (((620165.4 17...\n3   6.091786  0.3756301        Chon Buri MULTIPOLYGON (((714273.8 13...\n4   4.705205  0.4223316     Prachin Buri MULTIPOLYGON (((768228.7 15...\n5   8.701860  0.8445370         Buri Ram MULTIPOLYGON (((921217 1750...\n6   6.354893  0.7461402        Si Sa Ket MULTIPOLYGON (((1047999 172...\n7   4.478819  0.3451953 Nong Bua Lam Phu MULTIPOLYGON (((848689.2 19...\n8   9.158469  0.3364923         Phangnga MULTIPOLYGON (((457515.4 85...\n```\n\n\n:::\n:::\n\n\nNotice that the writings are inconsistent. Let us standardize it by changing the name in the boundary data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary <- boundary %>%\n  mutate(province_eng = recode(province_eng,\n                          \"Buri Ram\" = \"Buriram\",\n                          \"Chai Nat\" = \"Chainat\",\n                          \"Chon Buri\" = \"Chonburi\",\n                          \"Nong Bua Lam Phu\" = \"Nong Bua Lamphu\",\n                          \"Phangnga\" = \"Phang Nga\",\n                          \"Prachin Buri\" = \"Prachinburi\",\n                          \"Si Sa Ket\" = \"Sisaket\",\n                          \"Lop Buri\" = \"Lopburi\"))\n```\n:::\n\n\nLet us join the table again\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_tourism <- left_join(boundary, tourism_data, by = c(\"province_eng\"))\n```\n:::\n\n\nLet us do final check if there is any missing value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing <- thai_tourism %>% \n  filter(is.na(Shape_Leng))\n\nprint(missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 0 features and 11 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n [1] Shape_Leng         Shape_Area         province_eng       revenue_all       \n [5] revenue_thai       revenue_foreign    no_tourist_stay    no_tourist_all    \n [9] no_tourist_thai    no_tourist_foreign ratio_tourist_stay geometry          \n<0 rows> (or 0-length row.names)\n```\n\n\n:::\n:::\n\n\nThere is no missing value in the final dataset. The dataset is ready to be used for analysis\n\n### 3.4 Creating a Time Series Cube\n\nLet us create a time series cube based on the revenue generated from tourism in Thailand\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_revenue <- tourism %>%\n  filter(variable %in% c(\"revenue_all\"))\n```\n:::\n\n\nDerive a dataframe grouped by the year and province in Thailand\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_revenue <- tourism_revenue %>%\n  group_by(year, province_eng) %>%\n  summarize(value = sum(value, na.rm = TRUE),\n            variable = first(variable))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_revenue <- tourism_revenue %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_st <- spacetime(tourism_revenue, boundary,\n                      .loc_col = \"province_eng\",\n                      .time_col = \"year\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(tourism_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n## 4 Geographically Weighted Summary Statistics\n\n### 4.1 Mapping Revenue\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(thai_tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(thai_tourism) +\n  tm_polygons() +\n  tm_text(\"province_eng\", size=0.5)\n\ngdppc <- qtm(thai_tourism, \"revenue_all\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.64, 0.64. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(thai_tourism) +\n  tm_polygons() +\n  tm_text(\"province_eng\", size=0.5)\n\ngdppc <- qtm(thai_tourism, \"no_tourist_thai\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(thai_tourism) +\n  tm_polygons() +\n  tm_text(\"province_eng\", size=0.5)\n\ngdppc <- qtm(thai_tourism, \"no_tourist_foreign\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n**Findings:**\n\nFrom the choropleth map, we can roughly see that most foreign tourist visits Bangkok area and Chonburi area, which makes the revenue from tourist are heavy on the Bangkok area, while thailand tourists are more spread out across the region.\n\n### 4.2 Converting to SpatialPolygonDataFrame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_tourism_sp <- thai_tourism %>% \n  as_Spatial()\n```\n:::\n\n\n### 4.3 Geographically Weighted Summary Statistics with Adaptive Bandwidth\n\n#### 4.3.1 Determine Adaptive Bandwidth\n\n::: panel-tabset\n#### Cross-Validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(revenue_all ~ 1, \n             data = thai_tourism_sp,\n             approach = \"CV\",\n             adaptive = TRUE, \n             kernel = \"bisquare\", \n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 55 CV score: 4428033682012956772066406 \nAdaptive bandwidth: 42 CV score: 4500834259376365885224440 \nAdaptive bandwidth: 64 CV score: 4381413976764054394448466 \nAdaptive bandwidth: 68 CV score: 4361239963255682344428408 \nAdaptive bandwidth: 72 CV score: 4345180954006887388486882 \nAdaptive bandwidth: 73 CV score: 4341733369505226221800826 \nAdaptive bandwidth: 75 CV score: 4335011644352382000840428 \nAdaptive bandwidth: 75 CV score: 4335011644352382000840428 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 75\n```\n\n\n:::\n:::\n\n\n#### AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(revenue_all ~ 1, \n             data = thai_tourism_sp,\n             approach =\"AIC\",\n             adaptive = TRUE, \n             kernel = \"bisquare\", \n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 55 AICc value: 4257.211 \nAdaptive bandwidth (number of nearest neighbours): 42 AICc value: 4258.925 \nAdaptive bandwidth (number of nearest neighbours): 64 AICc value: 4256.018 \nAdaptive bandwidth (number of nearest neighbours): 68 AICc value: 4255.513 \nAdaptive bandwidth (number of nearest neighbours): 72 AICc value: 4255.01 \nAdaptive bandwidth (number of nearest neighbours): 73 AICc value: 4254.876 \nAdaptive bandwidth (number of nearest neighbours): 75 AICc value: 4254.645 \nAdaptive bandwidth (number of nearest neighbours): 75 AICc value: 4254.645 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 75\n```\n\n\n:::\n:::\n\n:::\n\n#### 4.3.2 Computing Geographically Weighted Summary Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = thai_tourism_sp,\n               vars = \"revenue_all\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n\n   ***********************Calibration information*************************\n\n   Local summary statistics calculated for variables:\n    revenue_all\n   Number of summary points: 77\n   Kernel function: bisquare \n   Summary points: the same locations as observations are used.\n   Adaptive bandwidth: 75 (number of nearest neighbours)\n   Distance metric: Great Circle distance metric is used.\n\n   ************************Local Summary Statistics:**********************\n   Summary information for Local means:\nrevenue_all_LM \n       Min.     1st Qu.      Median     3rd Qu.        Max. \n38547533805 50753907508 69229936334 81792139502 93215970572 \n   Summary information for local standard deviation :\nrevenue_all_LSD \n        Min.      1st Qu.       Median      3rd Qu.         Max. \n108209116300 161382206285 232157919632 282418062711 304777922969 \n   Summary information for local variance :\nrevenue_all_LVar \n                   Min.                 1st Qu.                  Median \n11709212850467257713840 26044216505375674860220 53897299647833038652842 \n                3rd Qu.                    Max. \n79759962145408084344682 92889582329423068146404 \n   Summary information for Local skewness:\nrevenue_all_LSKe \n    Min.  1st Qu.   Median  3rd Qu.     Max. \n4.949413 5.332615 5.651104 6.384997 8.984196 \n   Summary information for localized coefficient of variation:\nrevenue_all_LCV \n    Min.  1st Qu.   Median  3rd Qu.     Max. \n2.793948 3.082332 3.338459 3.501539 3.793002 \n\n   ************************************************************************\n```\n\n\n:::\n:::\n\n\n#### 4.3.3 Prepare Output Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_tourism <- as.data.frame(gwstat$SDF)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_gstat <- cbind(thai_tourism, gwstat_tourism)\n```\n:::\n\n\n#### 4.3.4 Visualizing Geographically Weighted Summary Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(thai_gstat) +\n  tm_fill(\"revenue_all_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Revenue Distribution\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size = 0.5,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\n### 4.4 Geographically Weighted Summary Statistics with Fixed Bandwidth\n\n#### 4.4.1 Computing fixed bandwidth\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = thai_tourism_sp,\n               vars = \"revenue_all\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = FALSE,\n               longlat = T)\n```\n:::\n\n\n#### 4.4.2 Prepare Output Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_tourism <- as.data.frame(gwstat$SDF)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_gstat <- cbind(thai_tourism, gwstat_tourism)\n```\n:::\n\n\n#### 4.4.3 Visualizing Geographically Weighted Summary Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(thai_gstat) +\n  tm_fill(\"revenue_all_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Revenue Distribution\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size = 0.5,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\n## 5 Global Measures of Spatial Association\n\n### 5.1 Deriving Queen's Contiguity Weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(thai_tourism, queen=TRUE)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\n```\n\n\n:::\n:::\n\n\n### 5.2 Row-standardised weights matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n```\n\n\n:::\n:::\n\n\n### 5.3 Computing Global Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(thai_tourism$revenue_all, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  thai_tourism$revenue_all  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = -0.38565, p-value = 0.6501\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.032059694      -0.013333333       0.002357817 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(thai_tourism$revenue_foreign, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  thai_tourism$revenue_foreign  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = -0.14552, p-value = 0.5578\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.021359589      -0.013333333       0.003042335 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(thai_tourism$revenue_thai, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  thai_tourism$revenue_thai  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = -0.59004, p-value = 0.7224\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.037892905      -0.013333333       0.001732513 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(thai_tourism$no_tourist_all, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  thai_tourism$no_tourist_all  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 0.24853, p-value = 0.4019\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.001276884      -0.013333333       0.002353354 \n```\n\n\n:::\n:::\n\n\n## 6 Exploratory Data Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(height = thai_tourism$revenue_all[order(-thai_tourism$revenue_all)][1:5],\n        names.arg = thai_tourism$province_eng[1:5],\n        col = \"skyblue\",\n        main = \"Top 5 Tourism Revenue per Province\",\n        xlab = \"Category\",\n        ylab = \"Values\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}