---
title: "In-class Exercise 6"
author: "Brigitta Karen Tsai"
date: "October 1, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Emerging Hot Spot Analysis

The analysis consists of 4 main steps:

-   Building a space-time cube

-   Calculating Getis-Ord local Gi\* statistic for each bin by using a FDR correction

-   Evaluating these hot and cold spot trends by using Mann-Kendall trend test

-   Categorising each study area location by referring to the resultant z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin

## 1 Getting Started

### 1.1 Install and Load R Packages

```{r}
pacman::p_load(sf, sfdep, tmap, plotly, tidyverse, Kendall)
```

### 1.2 The Data

1.  Geospatial data: Hunan (ESRI shapefile)
2.  Aspatial data: Hunan_GDPPC

## 2 Importing the data

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

```{r}
GDPPC <- read_csv("data/aspatial/Hunan_GDPPC.csv")
```

## 3 Creating a Time Series Cube

Create a spatio-temporal cube using the code below

```{r}
GDPPC_st <- spacetime(GDPPC, hunan,
                      .loc_col = "County",
                      .time_col = "Year")
```

Verify if it is a space-time cube object

```{r}
is_spacetime_cube(GDPPC_st)
```

## 4 Computing Gi\*

Let us compute local Gi\* statistics

### 4.1 Deriving the Spatial Weights

```{r}
GDPPC_nb <- GDPPC_st %>%
  activate("geometry") %>%
  mutate(nb = include_self(
    st_contiguity(geometry)),
    wt = st_inverse_distance(nb, 
                             geometry, 
                             scale = 1,
                             alpha = 1),
    .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

### 4.2 Computing Gi\* Statistics

```{r}
gi_stars <- GDPPC_nb %>% 
  group_by(Year) %>% 
  mutate(gi_star = local_gstar_perm(
    GDPPC, nb, wt)) %>% 
  tidyr::unnest(gi_star)
```

## 5 Mann-Kendall Test

A **monotonic series** or function only increases/ decreases and never changes direction. As long as the function either stays flat or continues to increase, it is monotonic.

H0: no monotonic trend

H1: monotonic trend is present

Reject null hypothesis if the p-value \< alpha value (i.e. 1-confident level)

Tau ranges between -1 and 1 where:

-1 is a perfectly decreasing series

1 is a perfectly increasing series

### 5.1 Mann-Kendall Test on Gi

Using these Gi\* measures, we can evaluate each location for a trend using the Mann-Kendall test.

```{r}
cbg <- gi_stars %>% 
  ungroup() %>% 
  filter(County == "Changsha") |> 
  select(County, Year, gi_star)
```

We use Changsa county, let's plot the result using ggplot2

```{r}
ggplot(data = cbg, 
       aes(x = Year, 
           y = gi_star)) +
  geom_line() +
  theme_light()
```

Interactive plot

```{r}
p <- ggplot(data = cbg, 
       aes(x = Year, 
           y = gi_star)) +
  geom_line() +
  theme_light()

ggplotly(p)
```

### 5.2 Printing Mann-Kendall Test Report

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

In the result above, **sl** is the p-value. According to the result, we reject the null hypothesis and infer that there is a slight upward trend

### 5.3 Mann-Kendall Test dataframe

```{r}
ehsa <- gi_stars %>%
  group_by(County) %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
head(ehsa)
```

Sort to show the emerging hot/cold spots

```{r}
emerging <- ehsa %>% 
  arrange(sl, abs(tau)) %>% 
  slice(1:10)
head(emerging)
```

## 6 Performing Emerging Hotspot Analysis

EHSA analysis takes spacetime object x (GDPPC_st) and the quoted name of the variable of interest (GDPPC) for .var. k argument is set to 1 by default (to specify the number of time lags). nsim map numbers of simulation to be performed

```{r}
ehsa <- emerging_hotspot_analysis(
  x = GDPPC_st, 
  .var = "GDPPC", 
  k = 1, 
  nsim = 99
)
```

### 6.1 Visualising the distribution of EHSA classes

#### 6.1.1 Distribution of EHSA Classes

```{r}
ggplot(data = ehsa,
       aes(x = classification)) +
  geom_bar()
```

#### 6.1.2 Geographic Distribution

Join Hunan and EHSA dataset before plotting the distribution

```{r}
hunan_ehsa <- hunan %>%
  left_join(ehsa,
            by = join_by(County == location))
```

```{r}
ehsa_sig <- hunan_ehsa  %>%
  filter(p_value < 0.05)
tmap_mode("plot")
tm_shape(hunan_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
  tm_fill("classification") + 
  tm_borders(alpha = 0.4)
```
