---
title: "Hands-on Exercise 4"
author: "Brigitta Karen Tsai"
date: "September 13, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Spatial Weights and Application

### 1. Install and Load R Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

### 2. Import Datasets

The dataset for this exercise is about Hunan country

#### 2.1 Import Shapefile into R

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

#### 2.2 Import csv file into R

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

#### 2.3 Perform Relational Join Table 

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

### 3. Visualising Regional Development Indicator

Prepare a basemap and a choropleth map to show distribution of GDPPC 2012 by using qtm() package

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

### 4. Compute Contiguity Spatial Weights 

#### 4.1 Compute QUEEN contiguity based neighbours

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report shows that there are 88 area units in Hunan, and the most connected area unit has 11 neighbours. There are 2 area units with only 1 neighbour.

The code below is to show neighboring polygons. For example, to see the neighbours for the first polygon in the object

```{r}
wm_q[[1]]
```

Retrieve the country name of Polygon ID=1 by using the code below

```{r}
hunan$County[1]
```

Reveal country names of the 5 neighbouring polygons:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

Retrieve GDPPC of these 5 countries using the code below:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Display the complete weight matrix:

```{r}
str(wm_q)
```

#### 4.2 Creating ROOK contiguity based neighbours

Compute Rook contiguity weight matrix:

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

#### 4.3 Visualising Contiguity Weights 

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

##### 4.3.1 Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

##### 4.3.2 Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

##### 4.3.3 Plotting both queen and rook

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### 5. Computing Distance Based Neighbours

#### 5.1 Determine the cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

#### 5.2 Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

The average number of links is the average number of neighbours that each points have in a certain specified distance range.

Display weight matrix of wm_d62

```{r}
str(wm_d62)
```

Another way to display the structure of weight matrix is by combining table() and card() of spdep

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

##### 5.2.1 Plotting fixed distance weight matrix

Plot the distance weight matrix using the code below

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours.

The black lines show the links of neighbours within the cut-off distance of 62km.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

#### 5.3 Computing adaptive distance weight matrix

One characteristic of fixed distance weight matrix is that more densely settled areas (usually urban), tend to have more neighbours and the less dense (rural) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

##### 5.3.1 Plotting distance based neighbours 

Plot weight matrix using the code below

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### 6. Weights based on IDW

Derive spatial weight matrix based on **Inversed Distance Method.**

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### 7. Row-standardised Weights Matrix

Assign equal weight to each neighboring polygon.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

To see the weight of the first polygon's eight neighbours type

```{r}
rswm_q$weights[1]
```

Derive a row standardised distance weight matrix using the same method

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

### 8. Application of Spatial Weight Matrix

Create 4 different spatial lagged variables, such as:

1.  Spatial lag with row-standardized weights
2.  Spatial lag as a sum of neighbouring values
3.  Spatial window average
4.  Spatial window sum

#### 8.1 Spatial Lag with row-standardized weights

Compute the average neighbour GDPPC value for each polygon. This value is often referred to as **spatially lagged values**

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

(Recall) Retrieve GDPPC of these 5 countries using the code below

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

This computes spatial lag values by adding the row-standardized weights to each neighbouring country

Append the spatially lagged GDPPC values to Hunan sf dataframe using the code below

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

Plot both GDPPC and spatial lag GDPPC

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

#### 8.2 Spatial lag as a sum of neighbouring values

We can calculate spatial lag as a sum of neighbouring values by assigning **binary weights.**

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

Append to dataframe

```{r}
hunan <- left_join(hunan, lag.res)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

#### 8.3 Spatial Window Average

Spatial window average uses row-standardized weights and includes **diagonal element.**

```{r}
wm_qs <- include.self(wm_q)
```

```{r}
wm_qs[[1]]
```

Notice that now \[1\] has 6 neighbours instead of 5

Now, obtain weights with nb2listw()

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Create lag variable from out weight structure and GDPPC variable

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Convert lag variable listw object into a dataframe

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

Compare the values of lag GDPPC and Spatial Window Average using kable()

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Plot lag_gdppc and w_ave_gdppc side by side for comparison

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

#### 8.4 Spatial Window Sum

Spatial window sum is the counter part of the window average, but **without using row-standardized weights.**

Add diagonal element

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Assign binary weights

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Notice that now \[1\] has 6 neighbours instead of 5

Assign weight values using nb2listw() and glist()

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Compute lag variable with our new weight structure

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Convert the lag variable to dataframe

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
