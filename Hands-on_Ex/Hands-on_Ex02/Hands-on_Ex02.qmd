---
title: "Hands-on Exercise 2"
author: "Brigitta Karen Tsai"
date: "August 30, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# 1st Order Spatial Point Patterns Analysis Methods

### The Data

1.  CHILDCARE
2.  MP14_SUBZONE_WEB_PL
3.  CostalOutline

### Install and Load R Packages

```{r}
pacman::p_load(sp, sf, raster, spatstat, tmap, tidyverse)
```

### Spatial Data Wrangling

##### Import Spatial Data

1.  Childcare dataset

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

2.  Costal Outline dataset

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

3.  Master Plan Planning Subzone Dataset

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

##### Retrieve the referencing system information of these geospatial data

1.  Childcare Dataset (Referencing System: EPSG: 3414)

```{r}
st_crs(childcare_sf)
```

2.  Costal Outline Dataset (Referencing System: SVY21)

```{r}
st_crs(sg_sf)
```

3.  Master Plan Planning Subzone Dataset (Referencing System: SVY21)

```{r}
st_crs(mpsz_sf)
```

##### Assign the correct crs to mpsz_sf and sg_sf

1.  mpsz_sf

```{r}
#| output: FALSE
mpsz_sf <- st_transform(mpsz_sf, 3414)
```

2.  sg_sf

```{r}
sg_sf <- st_transform(sg_sf, 3414)
```

Now the reference system has been transformed.

```{r}
st_crs(mpsz_sf)
```

```{r}
st_crs(sg_sf)
```

```{r}
st_crs(childcare_sf)
```

All 3 datasets now have projected coordinate system.

### Mapping the Spatial Datasets

##### Plotting a Map

tm_borders()

```{r}
tmap_mode("plot")
tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots()
```

##### Preparing Pin Map

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

### Geospatial Data Wrangling

##### Converting sf dataframes to sp's Spatial\* class

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

##### Converting the Spatial\* class into generic sp format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```

##### Converting the generic sp format into spatstat's ppp format

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

##### Handling duplicated points

Check duplication in a ppp object

```{r}
any(duplicated(childcare_ppp))
```

Count the number of co-indicence point

```{r}
multiplicity(childcare_ppp)
```

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

View locations of duplicate point events

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode('plot')
```

1st solution: From the map shown, duplicates can be easily identified when the point have darker black color compared to other points that have higher transparency.

2nd solution: Jittering approach

3rd solution: make each point "unique" and then attach the duplicates to the patterns as marks

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

##### Creating *owin* object

*Owin* object is specially designed to represent this polygonal region

```{r}
sg_owin <- as.owin(sg_sf)
```

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

##### Combining point events object and owin object

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

Plot the newly derived childcareSG_ppp

```{r}
plot(childcareSG_ppp)
```

### First-order Spatial Point Pattern Analysis

-   Deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes

-   Performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics

#### Kernel Density Estimation (KDE)

##### Compute a kernel density using automatic configurations of density() of spatstat

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_childcareSG_bw)
```

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

##### Rescaling KDE Values

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

#### Working with different automatic bandwidth methods

```{r}
 bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

#### Working with different kernel methods

Compute 3 more kernel density estimations by using these 3 kernel functions

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

### Fixed and Adaptive KDE

#### Computing KDE by using fixed bandwidth

Compute a KDE layer by defining a bandwidth of 600 meter

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

#### Computing KDE by using adaptive bandwidth

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

Compare the fixed and adaptive kernel density estimation outputs

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### Converting KDE output into grid object

The following code results in error:

gridded_kde_childcareSG_bw \<- as.SpatialGridDataFrame.im(kde_childcareSG.bw) spplot(gridded_kde_childcareSG_bw)

The code chunk above results in error due to function as.SpatialGridDataFrame.im not found. Let us try the code chunk below.

```{r}
pixel_kde_childcareSG_bw <- as.im(kde_childcareSG.bw)
```

```{r}
gridded_kde_childcareSG_bw <- as.im(pixel_kde_childcareSG_bw)
```

Unable to plot using spplot, let's use regular plot

```{r}
plot(gridded_kde_childcareSG_bw)
```

#### Converting gridded output into raster

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
```

Properties of kde_childcareSG_bw_raster

```{r}
kde_childcareSG_bw_raster
```

#### Assigning Projection Systems

The code below will be used to include CRS information on the raster layers

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

### Visualising the output in tmap

tmap mode is set as plot to have fixed and bigger view

```{r}
tmap_mode("plot")
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

### Comparing Spatial Point Patterns using KDE

Compare KDE of childcare at Ponggol, Tampines, Choa Chu Kang and Jurong West planning areas.

#### Extracting Study Area

Extract target planning areas

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plot the target planning areas

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

#### Creating *owin* object

Convert sf objects into owin objects that is required by spatstat

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

#### Combining childcare points and the study area

Extract childcare that is within the specific region

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

rescale.ppp() function used to transform unit of measurement from metre to kilometre

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

Plot the 4 study areas and the locations of the childcare centre

```{r}
plot(childcare_pg_ppp.km, main="Punggol")
```

```{r}
plot(childcare_tm_ppp.km, main="Tampines")
```

```{r}
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
```

```{r}
plot(childcare_jw_ppp.km, main="Jurong West")
```

#### Computing KDE

Compute KDE of these 4 planning areas, bw.diggle method is used to derive the bandwidth of each.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

#### Computing fixed bandwidth KDE

For comparison, 250 m will be used as the bandwidth

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## Nearest Neighbour Analysis

Perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.

H0 = The distribution of childcare services are randomly distributed

H1 = The distribution of childcare services are not randomly distributed

95% confidence interval will be used

### Testing spatial point patterns using Clark and Evans test

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

Null hypothesis is rejected because the distribution is clustered and not randomly distributed

### Clark and Evans Test: Choa Chu Kang planning area

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

### Clark and Evans Test: Tampines planning area

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

# 2nd Order Spatial Point Patterns Analysis Method

## Spatial Data Wrangling

All data has been processed in the 1st Order Spatial Point Patterns Analysis Method

## Analysing Spatial Point Process Using G-Function

### Choa Chu Kang planning area

#### Computing G-function estimation

The code below uses Gest() of spatstat package

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

#### Performing Complete Spatial Randomness Test

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed

H1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed

Null hypothesis will be rejected if p-value is smaller than alpha value of 0.001

Monte Carlo test with G-function

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

### Tampines planning area

#### Computing G-function estimation

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

#### Performing Complete Spatial Randomness Test

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

## Analysing Spatial Point Process Usin F-function

Computed using Fest() of spatstat package

### Choa Chu Kang planning area

#### Computing F-function estimation

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

### Performing Complete Spatial Randomness Test

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

### Tampines planning area

#### Computing F-function estimation

Monte Carlo test using F-function

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

#### Performing Complete Spatial Randomness Test

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

## Analysing Spatial Point Process Using K-Function

Computed using Kest() of spatstat package

### Choa Chu Kang planning area

#### Computing K-function estimate

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

#### Performing Complete Spatial Randomness Test

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### Tampines planning area

#### Computing K-function estimation

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

#### Performing Complete Spatial Randomness Test

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

## Analysing Spatial Point Process Using L-Function

Computed using Lest() of spatstat package

### Choa Chu Kang planning area

#### Computing L-function estimation

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

#### Performing Complete Spatial Randomness Test

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

### Tampines planning area

#### Computing L-function estimate

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

#### Performing Complete Spatial Randomness Test

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
